
drive1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800200  00001900  00001994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001900  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d3  0080025a  0080025a  000019ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00001a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f4e  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e5a  00000000  00000000  00003b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000102d  00000000  00000000  000049b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000504  00000000  00000000  000059e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000951  00000000  00000000  00005ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fae  00000000  00000000  00006835  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  000077e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	81 c0       	rjmp	.+258    	; 0x104 <__ctors_end>
       2:	00 00       	nop
       4:	a0 c0       	rjmp	.+320    	; 0x146 <__bad_interrupt>
       6:	00 00       	nop
       8:	9e c0       	rjmp	.+316    	; 0x146 <__bad_interrupt>
       a:	00 00       	nop
       c:	9c c0       	rjmp	.+312    	; 0x146 <__bad_interrupt>
       e:	00 00       	nop
      10:	9a c0       	rjmp	.+308    	; 0x146 <__bad_interrupt>
      12:	00 00       	nop
      14:	98 c0       	rjmp	.+304    	; 0x146 <__bad_interrupt>
      16:	00 00       	nop
      18:	96 c0       	rjmp	.+300    	; 0x146 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	94 c0       	rjmp	.+296    	; 0x146 <__bad_interrupt>
      1e:	00 00       	nop
      20:	92 c0       	rjmp	.+292    	; 0x146 <__bad_interrupt>
      22:	00 00       	nop
      24:	90 c0       	rjmp	.+288    	; 0x146 <__bad_interrupt>
      26:	00 00       	nop
      28:	8e c0       	rjmp	.+284    	; 0x146 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8c c0       	rjmp	.+280    	; 0x146 <__bad_interrupt>
      2e:	00 00       	nop
      30:	8a c0       	rjmp	.+276    	; 0x146 <__bad_interrupt>
      32:	00 00       	nop
      34:	88 c0       	rjmp	.+272    	; 0x146 <__bad_interrupt>
      36:	00 00       	nop
      38:	86 c0       	rjmp	.+268    	; 0x146 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bc c0       	rjmp	.+376    	; 0x1b6 <__vector_15>
      3e:	00 00       	nop
      40:	82 c0       	rjmp	.+260    	; 0x146 <__bad_interrupt>
      42:	00 00       	nop
      44:	80 c0       	rjmp	.+256    	; 0x146 <__bad_interrupt>
      46:	00 00       	nop
      48:	7e c0       	rjmp	.+252    	; 0x146 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c0       	rjmp	.+248    	; 0x146 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7a c0       	rjmp	.+244    	; 0x146 <__bad_interrupt>
      52:	00 00       	nop
      54:	78 c0       	rjmp	.+240    	; 0x146 <__bad_interrupt>
      56:	00 00       	nop
      58:	76 c0       	rjmp	.+236    	; 0x146 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	74 c0       	rjmp	.+232    	; 0x146 <__bad_interrupt>
      5e:	00 00       	nop
      60:	72 c0       	rjmp	.+228    	; 0x146 <__bad_interrupt>
      62:	00 00       	nop
      64:	70 c0       	rjmp	.+224    	; 0x146 <__bad_interrupt>
      66:	00 00       	nop
      68:	6e c0       	rjmp	.+220    	; 0x146 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6c c0       	rjmp	.+216    	; 0x146 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6a c0       	rjmp	.+212    	; 0x146 <__bad_interrupt>
      72:	00 00       	nop
      74:	68 c0       	rjmp	.+208    	; 0x146 <__bad_interrupt>
      76:	00 00       	nop
      78:	66 c0       	rjmp	.+204    	; 0x146 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	64 c0       	rjmp	.+200    	; 0x146 <__bad_interrupt>
      7e:	00 00       	nop
      80:	62 c0       	rjmp	.+196    	; 0x146 <__bad_interrupt>
      82:	00 00       	nop
      84:	60 c0       	rjmp	.+192    	; 0x146 <__bad_interrupt>
      86:	00 00       	nop
      88:	5e c0       	rjmp	.+188    	; 0x146 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5c c0       	rjmp	.+184    	; 0x146 <__bad_interrupt>
      8e:	00 00       	nop
      90:	5a c0       	rjmp	.+180    	; 0x146 <__bad_interrupt>
      92:	00 00       	nop
      94:	58 c0       	rjmp	.+176    	; 0x146 <__bad_interrupt>
      96:	00 00       	nop
      98:	56 c0       	rjmp	.+172    	; 0x146 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	54 c0       	rjmp	.+168    	; 0x146 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	52 c0       	rjmp	.+164    	; 0x146 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	50 c0       	rjmp	.+160    	; 0x146 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4e c0       	rjmp	.+156    	; 0x146 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4c c0       	rjmp	.+152    	; 0x146 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4a c0       	rjmp	.+148    	; 0x146 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	48 c0       	rjmp	.+144    	; 0x146 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	46 c0       	rjmp	.+140    	; 0x146 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	44 c0       	rjmp	.+136    	; 0x146 <__bad_interrupt>
      be:	00 00       	nop
      c0:	42 c0       	rjmp	.+132    	; 0x146 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	40 c0       	rjmp	.+128    	; 0x146 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3e c0       	rjmp	.+124    	; 0x146 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	3c c0       	rjmp	.+120    	; 0x146 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	3a c0       	rjmp	.+116    	; 0x146 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	38 c0       	rjmp	.+112    	; 0x146 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c6       	rjmp	.+3148   	; 0xd26 <__vector_54>
      da:	00 00       	nop
      dc:	34 c0       	rjmp	.+104    	; 0x146 <__bad_interrupt>
      de:	00 00       	nop
      e0:	32 c0       	rjmp	.+100    	; 0x146 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	26 07       	cpc	r18, r22
      e6:	2b 07       	cpc	r18, r27
      e8:	3f 07       	cpc	r19, r31
      ea:	60 07       	cpc	r22, r16
      ec:	75 07       	cpc	r23, r21
      ee:	79 07       	cpc	r23, r25
      f0:	a4 07       	cpc	r26, r20
      f2:	ed 07       	cpc	r30, r29
      f4:	02 08       	sbc	r0, r2
      f6:	06 08       	sbc	r0, r6
      f8:	0a 08       	sbc	r0, r10
      fa:	1e 08       	sbc	r1, r14
      fc:	44 08       	sbc	r4, r4
      fe:	48 08       	sbc	r4, r8
     100:	53 08       	sbc	r5, r3
     102:	5b 08       	sbc	r5, r11

00000104 <__ctors_end>:
     104:	11 24       	eor	r1, r1
     106:	1f be       	out	0x3f, r1	; 63
     108:	cf ef       	ldi	r28, 0xFF	; 255
     10a:	d1 e2       	ldi	r29, 0x21	; 33
     10c:	de bf       	out	0x3e, r29	; 62
     10e:	cd bf       	out	0x3d, r28	; 61
     110:	00 e0       	ldi	r16, 0x00	; 0
     112:	0c bf       	out	0x3c, r16	; 60

00000114 <__do_copy_data>:
     114:	12 e0       	ldi	r17, 0x02	; 2
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b2 e0       	ldi	r27, 0x02	; 2
     11a:	e0 e0       	ldi	r30, 0x00	; 0
     11c:	f9 e1       	ldi	r31, 0x19	; 25
     11e:	00 e0       	ldi	r16, 0x00	; 0
     120:	0b bf       	out	0x3b, r16	; 59
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x14>
     124:	07 90       	elpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	aa 35       	cpi	r26, 0x5A	; 90
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0x10>

0000012e <__do_clear_bss>:
     12e:	23 e0       	ldi	r18, 0x03	; 3
     130:	aa e5       	ldi	r26, 0x5A	; 90
     132:	b2 e0       	ldi	r27, 0x02	; 2
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	ad 32       	cpi	r26, 0x2D	; 45
     13a:	b2 07       	cpc	r27, r18
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
     13e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <main>
     142:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <_exit>

00000146 <__bad_interrupt>:
     146:	5c cf       	rjmp	.-328    	; 0x0 <__vectors>

00000148 <voltageread>:
	else if (in_var<l_limit)
	{
		in_var=l_limit;
	}
	return in_var;
}
     148:	a2 b3       	in	r26, 0x12	; 18
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	22 ee       	ldi	r18, 0xE2	; 226
     14e:	3f ef       	ldi	r19, 0xFF	; 255
     150:	4f ef       	ldi	r20, 0xFF	; 255
     152:	5f ef       	ldi	r21, 0xFF	; 255
     154:	0e 94 09 0c 	call	0x1812	; 0x1812 <__muluhisi3>
     158:	2f e3       	ldi	r18, 0x3F	; 63
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	40 e0       	ldi	r20, 0x00	; 0
     15e:	50 e0       	ldi	r21, 0x00	; 0
     160:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__divmodsi4>
     164:	ca 01       	movw	r24, r20
     166:	b9 01       	movw	r22, r18
     168:	61 5f       	subi	r22, 0xF1	; 241
     16a:	7f 4f       	sbci	r23, 0xFF	; 255
     16c:	8f 4f       	sbci	r24, 0xFF	; 255
     16e:	9f 4f       	sbci	r25, 0xFF	; 255
     170:	0e 94 bf 0a 	call	0x157e	; 0x157e <__floatsisf>
     174:	60 93 5a 02 	sts	0x025A, r22	; 0x80025a <__data_end>
     178:	70 93 5b 02 	sts	0x025B, r23	; 0x80025b <__data_end+0x1>
     17c:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <__data_end+0x2>
     180:	90 93 5d 02 	sts	0x025D, r25	; 0x80025d <__data_end+0x3>
     184:	08 95       	ret

00000186 <timer2_start>:
     186:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     18a:	87 e0       	ldi	r24, 0x07	; 7
     18c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     196:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <timercount_2+0x1>
     19a:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <timercount_2>
     19e:	08 95       	ret

000001a0 <timer2_stop>:
     1a0:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
     1a4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7000b1>
     1a8:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     1ac:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <timercount_2+0x1>
     1b0:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <timercount_2>
     1b4:	08 95       	ret

000001b6 <__vector_15>:
     1b6:	1f 92       	push	r1
     1b8:	0f 92       	push	r0
     1ba:	0f b6       	in	r0, 0x3f	; 63
     1bc:	0f 92       	push	r0
     1be:	11 24       	eor	r1, r1
     1c0:	0b b6       	in	r0, 0x3b	; 59
     1c2:	0f 92       	push	r0
     1c4:	2f 93       	push	r18
     1c6:	3f 93       	push	r19
     1c8:	4f 93       	push	r20
     1ca:	5f 93       	push	r21
     1cc:	6f 93       	push	r22
     1ce:	7f 93       	push	r23
     1d0:	8f 93       	push	r24
     1d2:	9f 93       	push	r25
     1d4:	af 93       	push	r26
     1d6:	bf 93       	push	r27
     1d8:	ef 93       	push	r30
     1da:	ff 93       	push	r31
     1dc:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <timercount_2>
     1e0:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <timercount_2+0x1>
     1e4:	01 96       	adiw	r24, 0x01	; 1
     1e6:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <timercount_2+0x1>
     1ea:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <timercount_2>
     1ee:	cd 97       	sbiw	r24, 0x3d	; 61
     1f0:	08 f1       	brcs	.+66     	; 0x234 <__vector_15+0x7e>
     1f2:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <lf_mode>
     1f6:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <lf_mode+0x1>
     1fa:	08 97       	sbiw	r24, 0x08	; 8
     1fc:	39 f4       	brne	.+14     	; 0x20c <__vector_15+0x56>
     1fe:	89 e0       	ldi	r24, 0x09	; 9
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <lf_mode+0x1>
     206:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <lf_mode>
     20a:	ca df       	rcall	.-108    	; 0x1a0 <timer2_stop>
     20c:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <timercount_2>
     210:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <timercount_2+0x1>
     214:	8b 35       	cpi	r24, 0x5B	; 91
     216:	91 05       	cpc	r25, r1
     218:	68 f0       	brcs	.+26     	; 0x234 <__vector_15+0x7e>
     21a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <lf_mode>
     21e:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <lf_mode+0x1>
     222:	04 97       	sbiw	r24, 0x04	; 4
     224:	31 f4       	brne	.+12     	; 0x232 <__vector_15+0x7c>
     226:	85 e0       	ldi	r24, 0x05	; 5
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <lf_mode+0x1>
     22e:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <lf_mode>
     232:	b6 df       	rcall	.-148    	; 0x1a0 <timer2_stop>
     234:	ff 91       	pop	r31
     236:	ef 91       	pop	r30
     238:	bf 91       	pop	r27
     23a:	af 91       	pop	r26
     23c:	9f 91       	pop	r25
     23e:	8f 91       	pop	r24
     240:	7f 91       	pop	r23
     242:	6f 91       	pop	r22
     244:	5f 91       	pop	r21
     246:	4f 91       	pop	r20
     248:	3f 91       	pop	r19
     24a:	2f 91       	pop	r18
     24c:	0f 90       	pop	r0
     24e:	0b be       	out	0x3b, r0	; 59
     250:	0f 90       	pop	r0
     252:	0f be       	out	0x3f, r0	; 63
     254:	0f 90       	pop	r0
     256:	1f 90       	pop	r1
     258:	18 95       	reti

0000025a <resetmode>:
     25a:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <drive_mode+0x1>
     25e:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <drive_mode>
     262:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <lf_mode+0x1>
     266:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <lf_mode>
     26a:	08 95       	ret

0000026c <rightproportional>:
     26c:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <rightcurrent>
     270:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <rightcurrent+0x1>
     274:	60 91 94 02 	lds	r22, 0x0294	; 0x800294 <righthighcount>
     278:	70 91 95 02 	lds	r23, 0x0295	; 0x800295 <righthighcount+0x1>
     27c:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__divmodhi4>
     280:	07 2e       	mov	r0, r23
     282:	00 0c       	add	r0, r0
     284:	88 0b       	sbc	r24, r24
     286:	99 0b       	sbc	r25, r25
     288:	0e 94 bf 0a 	call	0x157e	; 0x157e <__floatsisf>
     28c:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <righttarget>
     290:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <righttarget+0x1>
     294:	40 91 1e 02 	lds	r20, 0x021E	; 0x80021e <righttarget+0x2>
     298:	50 91 1f 02 	lds	r21, 0x021F	; 0x80021f <righttarget+0x3>
     29c:	0e 94 23 0a 	call	0x1446	; 0x1446 <__subsf3>
     2a0:	9b 01       	movw	r18, r22
     2a2:	ac 01       	movw	r20, r24
     2a4:	60 93 8a 02 	sts	0x028A, r22	; 0x80028a <righterror>
     2a8:	70 93 8b 02 	sts	0x028B, r23	; 0x80028b <righterror+0x1>
     2ac:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <righterror+0x2>
     2b0:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <righterror+0x3>
     2b4:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <kpr>
     2b8:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <kpr+0x1>
     2bc:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <kpr+0x2>
     2c0:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <kpr+0x3>
     2c4:	0e 94 6f 0b 	call	0x16de	; 0x16de <__mulsf3>
     2c8:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <Pr>
     2cc:	70 93 83 02 	sts	0x0283, r23	; 0x800283 <Pr+0x1>
     2d0:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <Pr+0x2>
     2d4:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <Pr+0x3>
     2d8:	08 95       	ret

000002da <leftproportional>:
     2da:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <leftcurrent>
     2de:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <leftcurrent+0x1>
     2e2:	60 91 90 02 	lds	r22, 0x0290	; 0x800290 <lefthighcount>
     2e6:	70 91 91 02 	lds	r23, 0x0291	; 0x800291 <lefthighcount+0x1>
     2ea:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__divmodhi4>
     2ee:	07 2e       	mov	r0, r23
     2f0:	00 0c       	add	r0, r0
     2f2:	88 0b       	sbc	r24, r24
     2f4:	99 0b       	sbc	r25, r25
     2f6:	0e 94 bf 0a 	call	0x157e	; 0x157e <__floatsisf>
     2fa:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <lefttarget>
     2fe:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <lefttarget+0x1>
     302:	40 91 1a 02 	lds	r20, 0x021A	; 0x80021a <lefttarget+0x2>
     306:	50 91 1b 02 	lds	r21, 0x021B	; 0x80021b <lefttarget+0x3>
     30a:	0e 94 23 0a 	call	0x1446	; 0x1446 <__subsf3>
     30e:	9b 01       	movw	r18, r22
     310:	ac 01       	movw	r20, r24
     312:	60 93 86 02 	sts	0x0286, r22	; 0x800286 <lefterror>
     316:	70 93 87 02 	sts	0x0287, r23	; 0x800287 <lefterror+0x1>
     31a:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <lefterror+0x2>
     31e:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <lefterror+0x3>
     322:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <kpl>
     326:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <kpl+0x1>
     32a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <kpl+0x2>
     32e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <kpl+0x3>
     332:	0e 94 6f 0b 	call	0x16de	; 0x16de <__mulsf3>
     336:	60 93 7e 02 	sts	0x027E, r22	; 0x80027e <Pl>
     33a:	70 93 7f 02 	sts	0x027F, r23	; 0x80027f <Pl+0x1>
     33e:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <Pl+0x2>
     342:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <Pl+0x3>
     346:	08 95       	ret

00000348 <frontproportional>:
     348:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <frontcurrent>
     34c:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <frontcurrent+0x1>
     350:	60 91 7a 02 	lds	r22, 0x027A	; 0x80027a <fronthighcount>
     354:	70 91 7b 02 	lds	r23, 0x027B	; 0x80027b <fronthighcount+0x1>
     358:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__divmodhi4>
     35c:	07 2e       	mov	r0, r23
     35e:	00 0c       	add	r0, r0
     360:	88 0b       	sbc	r24, r24
     362:	99 0b       	sbc	r25, r25
     364:	0e 94 bf 0a 	call	0x157e	; 0x157e <__floatsisf>
     368:	9b 01       	movw	r18, r22
     36a:	ac 01       	movw	r20, r24
     36c:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <fronttarget>
     370:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <fronttarget+0x1>
     374:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <fronttarget+0x2>
     378:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <fronttarget+0x3>
     37c:	0e 94 23 0a 	call	0x1446	; 0x1446 <__subsf3>
     380:	9b 01       	movw	r18, r22
     382:	ac 01       	movw	r20, r24
     384:	60 93 70 02 	sts	0x0270, r22	; 0x800270 <fronterror>
     388:	70 93 71 02 	sts	0x0271, r23	; 0x800271 <fronterror+0x1>
     38c:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <fronterror+0x2>
     390:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <fronterror+0x3>
     394:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <kpf>
     398:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <kpf+0x1>
     39c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <kpf+0x2>
     3a0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <kpf+0x3>
     3a4:	0e 94 6f 0b 	call	0x16de	; 0x16de <__mulsf3>
     3a8:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <Pf>
     3ac:	70 93 69 02 	sts	0x0269, r23	; 0x800269 <Pf+0x1>
     3b0:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <Pf+0x2>
     3b4:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <Pf+0x3>
     3b8:	08 95       	ret

000003ba <backproportional>:
     3ba:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <backcurrent>
     3be:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <backcurrent+0x1>
     3c2:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <backhighcount>
     3c6:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <backhighcount+0x1>
     3ca:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__divmodhi4>
     3ce:	07 2e       	mov	r0, r23
     3d0:	00 0c       	add	r0, r0
     3d2:	88 0b       	sbc	r24, r24
     3d4:	99 0b       	sbc	r25, r25
     3d6:	0e 94 bf 0a 	call	0x157e	; 0x157e <__floatsisf>
     3da:	9b 01       	movw	r18, r22
     3dc:	ac 01       	movw	r20, r24
     3de:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <backtarget>
     3e2:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <backtarget+0x1>
     3e6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <backtarget+0x2>
     3ea:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <backtarget+0x3>
     3ee:	0e 94 23 0a 	call	0x1446	; 0x1446 <__subsf3>
     3f2:	9b 01       	movw	r18, r22
     3f4:	ac 01       	movw	r20, r24
     3f6:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <backerror>
     3fa:	70 93 6d 02 	sts	0x026D, r23	; 0x80026d <backerror+0x1>
     3fe:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <backerror+0x2>
     402:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <backerror+0x3>
     406:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <__data_start>
     40a:	70 91 01 02 	lds	r23, 0x0201	; 0x800201 <__data_start+0x1>
     40e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_start+0x2>
     412:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_start+0x3>
     416:	0e 94 6f 0b 	call	0x16de	; 0x16de <__mulsf3>
     41a:	60 93 64 02 	sts	0x0264, r22	; 0x800264 <Pb>
     41e:	70 93 65 02 	sts	0x0265, r23	; 0x800265 <Pb+0x1>
     422:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <Pb+0x2>
     426:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <Pb+0x3>
     42a:	08 95       	ret

0000042c <resetvar>:
     42c:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <sensright>
     430:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <sensleft>
     434:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <righthighcount+0x1>
     438:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <righthighcount>
     43c:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <rightcurrent+0x1>
     440:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <rightcurrent>
     444:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <lefthighcount+0x1>
     448:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <lefthighcount>
     44c:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <leftcurrent+0x1>
     450:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <leftcurrent>
     454:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <sensfront>
     458:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <sensback>
     45c:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <fronthighcount+0x1>
     460:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <fronthighcount>
     464:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <frontcurrent+0x1>
     468:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <frontcurrent>
     46c:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <backhighcount+0x1>
     470:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <backhighcount>
     474:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <backcurrent+0x1>
     478:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <backcurrent>
     47c:	08 95       	ret

0000047e <writeeep>:
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	c0 e0       	ldi	r28, 0x00	; 0
     484:	d0 e0       	ldi	r29, 0x00	; 0
     486:	ce 01       	movw	r24, r28
     488:	dd 23       	and	r29, r29
     48a:	0c f4       	brge	.+2      	; 0x48e <writeeep+0x10>
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	8e 7f       	andi	r24, 0xFE	; 254
     490:	fc 01       	movw	r30, r24
     492:	e8 54       	subi	r30, 0x48	; 72
     494:	fd 4f       	sbci	r31, 0xFD	; 253
     496:	60 81       	ld	r22, Z
     498:	71 81       	ldd	r23, Z+1	; 0x01
     49a:	ce 01       	movw	r24, r28
     49c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <eeprom_write_word>
     4a0:	22 96       	adiw	r28, 0x02	; 2
     4a2:	c0 32       	cpi	r28, 0x20	; 32
     4a4:	d1 05       	cpc	r29, r1
     4a6:	79 f7       	brne	.-34     	; 0x486 <writeeep+0x8>
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <readeep>:
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	c0 e0       	ldi	r28, 0x00	; 0
     4b4:	d0 e0       	ldi	r29, 0x00	; 0
     4b6:	ce 01       	movw	r24, r28
     4b8:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <eeprom_read_word>
     4bc:	9e 01       	movw	r18, r28
     4be:	dd 23       	and	r29, r29
     4c0:	14 f4       	brge	.+4      	; 0x4c6 <readeep+0x18>
     4c2:	2f 5f       	subi	r18, 0xFF	; 255
     4c4:	3f 4f       	sbci	r19, 0xFF	; 255
     4c6:	2e 7f       	andi	r18, 0xFE	; 254
     4c8:	f9 01       	movw	r30, r18
     4ca:	e8 54       	subi	r30, 0x48	; 72
     4cc:	fd 4f       	sbci	r31, 0xFD	; 253
     4ce:	91 83       	std	Z+1, r25	; 0x01
     4d0:	80 83       	st	Z, r24
     4d2:	22 96       	adiw	r28, 0x02	; 2
     4d4:	c0 32       	cpi	r28, 0x20	; 32
     4d6:	d1 05       	cpc	r29, r1
     4d8:	71 f7       	brne	.-36     	; 0x4b6 <readeep+0x8>
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <drivewheel_1>:
     4e0:	09 2e       	mov	r0, r25
     4e2:	00 0c       	add	r0, r0
     4e4:	aa 0b       	sbc	r26, r26
     4e6:	bb 0b       	sbc	r27, r27
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	2f ef       	ldi	r18, 0xFF	; 255
     4ec:	92 07       	cpc	r25, r18
     4ee:	a2 07       	cpc	r26, r18
     4f0:	b2 07       	cpc	r27, r18
     4f2:	24 f4       	brge	.+8      	; 0x4fc <drivewheel_1+0x1c>
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	9f ef       	ldi	r25, 0xFF	; 255
     4f8:	af ef       	ldi	r26, 0xFF	; 255
     4fa:	bf ef       	ldi	r27, 0xFF	; 255
     4fc:	8f 3f       	cpi	r24, 0xFF	; 255
     4fe:	91 05       	cpc	r25, r1
     500:	a1 05       	cpc	r26, r1
     502:	b1 05       	cpc	r27, r1
     504:	29 f0       	breq	.+10     	; 0x510 <drivewheel_1+0x30>
     506:	24 f0       	brlt	.+8      	; 0x510 <drivewheel_1+0x30>
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	a0 e0       	ldi	r26, 0x00	; 0
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	9c 01       	movw	r18, r24
     512:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <js_error>
     516:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <js_error+0x1>
     51a:	66 27       	eor	r22, r22
     51c:	77 27       	eor	r23, r23
     51e:	64 1b       	sub	r22, r20
     520:	75 0b       	sbc	r23, r21
     522:	86 17       	cp	r24, r22
     524:	97 07       	cpc	r25, r23
     526:	3c f4       	brge	.+14     	; 0x536 <drivewheel_1+0x56>
     528:	28 9a       	sbi	0x05, 0	; 5
     52a:	29 98       	cbi	0x05, 1	; 5
     52c:	22 27       	eor	r18, r18
     52e:	33 27       	eor	r19, r19
     530:	28 1b       	sub	r18, r24
     532:	39 0b       	sbc	r19, r25
     534:	08 c0       	rjmp	.+16     	; 0x546 <drivewheel_1+0x66>
     536:	48 17       	cp	r20, r24
     538:	59 07       	cpc	r21, r25
     53a:	1c f4       	brge	.+6      	; 0x542 <drivewheel_1+0x62>
     53c:	29 9a       	sbi	0x05, 1	; 5
     53e:	28 98       	cbi	0x05, 0	; 5
     540:	02 c0       	rjmp	.+4      	; 0x546 <drivewheel_1+0x66>
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
     54a:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
     54e:	08 95       	ret

00000550 <drivewheel_2>:
     550:	09 2e       	mov	r0, r25
     552:	00 0c       	add	r0, r0
     554:	aa 0b       	sbc	r26, r26
     556:	bb 0b       	sbc	r27, r27
     558:	81 30       	cpi	r24, 0x01	; 1
     55a:	2f ef       	ldi	r18, 0xFF	; 255
     55c:	92 07       	cpc	r25, r18
     55e:	a2 07       	cpc	r26, r18
     560:	b2 07       	cpc	r27, r18
     562:	24 f4       	brge	.+8      	; 0x56c <drivewheel_2+0x1c>
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	9f ef       	ldi	r25, 0xFF	; 255
     568:	af ef       	ldi	r26, 0xFF	; 255
     56a:	bf ef       	ldi	r27, 0xFF	; 255
     56c:	8f 3f       	cpi	r24, 0xFF	; 255
     56e:	91 05       	cpc	r25, r1
     570:	a1 05       	cpc	r26, r1
     572:	b1 05       	cpc	r27, r1
     574:	29 f0       	breq	.+10     	; 0x580 <drivewheel_2+0x30>
     576:	24 f0       	brlt	.+8      	; 0x580 <drivewheel_2+0x30>
     578:	8f ef       	ldi	r24, 0xFF	; 255
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	a0 e0       	ldi	r26, 0x00	; 0
     57e:	b0 e0       	ldi	r27, 0x00	; 0
     580:	9c 01       	movw	r18, r24
     582:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <js_error>
     586:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <js_error+0x1>
     58a:	66 27       	eor	r22, r22
     58c:	77 27       	eor	r23, r23
     58e:	64 1b       	sub	r22, r20
     590:	75 0b       	sbc	r23, r21
     592:	86 17       	cp	r24, r22
     594:	97 07       	cpc	r25, r23
     596:	3c f4       	brge	.+14     	; 0x5a6 <drivewheel_2+0x56>
     598:	2a 9a       	sbi	0x05, 2	; 5
     59a:	2b 98       	cbi	0x05, 3	; 5
     59c:	22 27       	eor	r18, r18
     59e:	33 27       	eor	r19, r19
     5a0:	28 1b       	sub	r18, r24
     5a2:	39 0b       	sbc	r19, r25
     5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <drivewheel_2+0x66>
     5a6:	48 17       	cp	r20, r24
     5a8:	59 07       	cpc	r21, r25
     5aa:	1c f4       	brge	.+6      	; 0x5b2 <drivewheel_2+0x62>
     5ac:	2b 9a       	sbi	0x05, 3	; 5
     5ae:	2a 98       	cbi	0x05, 2	; 5
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <drivewheel_2+0x66>
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	30 93 9b 00 	sts	0x009B, r19	; 0x80009b <__TEXT_REGION_LENGTH__+0x70009b>
     5ba:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <__TEXT_REGION_LENGTH__+0x70009a>
     5be:	08 95       	ret

000005c0 <drivewheel_3>:
     5c0:	09 2e       	mov	r0, r25
     5c2:	00 0c       	add	r0, r0
     5c4:	aa 0b       	sbc	r26, r26
     5c6:	bb 0b       	sbc	r27, r27
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	2f ef       	ldi	r18, 0xFF	; 255
     5cc:	92 07       	cpc	r25, r18
     5ce:	a2 07       	cpc	r26, r18
     5d0:	b2 07       	cpc	r27, r18
     5d2:	24 f4       	brge	.+8      	; 0x5dc <drivewheel_3+0x1c>
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	9f ef       	ldi	r25, 0xFF	; 255
     5d8:	af ef       	ldi	r26, 0xFF	; 255
     5da:	bf ef       	ldi	r27, 0xFF	; 255
     5dc:	8f 3f       	cpi	r24, 0xFF	; 255
     5de:	91 05       	cpc	r25, r1
     5e0:	a1 05       	cpc	r26, r1
     5e2:	b1 05       	cpc	r27, r1
     5e4:	29 f0       	breq	.+10     	; 0x5f0 <drivewheel_3+0x30>
     5e6:	24 f0       	brlt	.+8      	; 0x5f0 <drivewheel_3+0x30>
     5e8:	8f ef       	ldi	r24, 0xFF	; 255
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	a0 e0       	ldi	r26, 0x00	; 0
     5ee:	b0 e0       	ldi	r27, 0x00	; 0
     5f0:	9c 01       	movw	r18, r24
     5f2:	40 91 42 02 	lds	r20, 0x0242	; 0x800242 <js_error>
     5f6:	50 91 43 02 	lds	r21, 0x0243	; 0x800243 <js_error+0x1>
     5fa:	66 27       	eor	r22, r22
     5fc:	77 27       	eor	r23, r23
     5fe:	64 1b       	sub	r22, r20
     600:	75 0b       	sbc	r23, r21
     602:	86 17       	cp	r24, r22
     604:	97 07       	cpc	r25, r23
     606:	3c f4       	brge	.+14     	; 0x616 <drivewheel_3+0x56>
     608:	2c 9a       	sbi	0x05, 4	; 5
     60a:	2d 98       	cbi	0x05, 5	; 5
     60c:	22 27       	eor	r18, r18
     60e:	33 27       	eor	r19, r19
     610:	28 1b       	sub	r18, r24
     612:	39 0b       	sbc	r19, r25
     614:	08 c0       	rjmp	.+16     	; 0x626 <drivewheel_3+0x66>
     616:	48 17       	cp	r20, r24
     618:	59 07       	cpc	r21, r25
     61a:	1c f4       	brge	.+6      	; 0x622 <drivewheel_3+0x62>
     61c:	2d 9a       	sbi	0x05, 5	; 5
     61e:	2c 98       	cbi	0x05, 4	; 5
     620:	02 c0       	rjmp	.+4      	; 0x626 <drivewheel_3+0x66>
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	30 93 9d 00 	sts	0x009D, r19	; 0x80009d <__TEXT_REGION_LENGTH__+0x70009d>
     62a:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x70009c>
     62e:	08 95       	ret

00000630 <drive_3W>:
     630:	9c 01       	movw	r18, r24
     632:	ca 01       	movw	r24, r20
     634:	82 1b       	sub	r24, r18
     636:	93 0b       	sbc	r25, r19
     638:	86 1b       	sub	r24, r22
     63a:	97 0b       	sbc	r25, r23
     63c:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <w1+0x1>
     640:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <w1>
     644:	24 0f       	add	r18, r20
     646:	35 1f       	adc	r19, r21
     648:	26 1b       	sub	r18, r22
     64a:	37 0b       	sbc	r19, r23
     64c:	30 93 25 03 	sts	0x0325, r19	; 0x800325 <w2+0x1>
     650:	20 93 24 03 	sts	0x0324, r18	; 0x800324 <w2>
     654:	64 0f       	add	r22, r20
     656:	75 1f       	adc	r23, r21
     658:	66 0f       	add	r22, r22
     65a:	77 1f       	adc	r23, r23
     65c:	70 93 23 03 	sts	0x0323, r23	; 0x800323 <w3+0x1>
     660:	60 93 22 03 	sts	0x0322, r22	; 0x800322 <w3>
     664:	3d df       	rcall	.-390    	; 0x4e0 <drivewheel_1>
     666:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <w2>
     66a:	90 91 25 03 	lds	r25, 0x0325	; 0x800325 <w2+0x1>
     66e:	70 df       	rcall	.-288    	; 0x550 <drivewheel_2>
     670:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <w3>
     674:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <w3+0x1>
     678:	a3 cf       	rjmp	.-186    	; 0x5c0 <drivewheel_3>
     67a:	08 95       	ret

0000067c <lf_vertical>:
     67c:	4f 92       	push	r4
     67e:	5f 92       	push	r5
     680:	6f 92       	push	r6
     682:	7f 92       	push	r7
     684:	8f 92       	push	r8
     686:	9f 92       	push	r9
     688:	af 92       	push	r10
     68a:	bf 92       	push	r11
     68c:	cf 92       	push	r12
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <fronthighcount>
     69c:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <fronthighcount+0x1>
     6a0:	23 2b       	or	r18, r19
     6a2:	31 f4       	brne	.+12     	; 0x6b0 <lf_vertical+0x34>
     6a4:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <backhighcount>
     6a8:	30 91 77 02 	lds	r19, 0x0277	; 0x800277 <backhighcount+0x1>
     6ac:	23 2b       	or	r18, r19
     6ae:	11 f1       	breq	.+68     	; 0x6f4 <lf_vertical+0x78>
     6b0:	ec 01       	movw	r28, r24
     6b2:	c0 90 68 02 	lds	r12, 0x0268	; 0x800268 <Pf>
     6b6:	d0 90 69 02 	lds	r13, 0x0269	; 0x800269 <Pf+0x1>
     6ba:	e0 90 6a 02 	lds	r14, 0x026A	; 0x80026a <Pf+0x2>
     6be:	f0 90 6b 02 	lds	r15, 0x026B	; 0x80026b <Pf+0x3>
     6c2:	80 90 64 02 	lds	r8, 0x0264	; 0x800264 <Pb>
     6c6:	90 90 65 02 	lds	r9, 0x0265	; 0x800265 <Pb+0x1>
     6ca:	a0 90 66 02 	lds	r10, 0x0266	; 0x800266 <Pb+0x2>
     6ce:	b0 90 67 02 	lds	r11, 0x0267	; 0x800267 <Pb+0x3>
     6d2:	a5 01       	movw	r20, r10
     6d4:	94 01       	movw	r18, r8
     6d6:	c7 01       	movw	r24, r14
     6d8:	b6 01       	movw	r22, r12
     6da:	b5 d6       	rcall	.+3434   	; 0x1446 <__subsf3>
     6dc:	1d d7       	rcall	.+3642   	; 0x1518 <__fixsfsi>
     6de:	2b 01       	movw	r4, r22
     6e0:	3c 01       	movw	r6, r24
     6e2:	a5 01       	movw	r20, r10
     6e4:	94 01       	movw	r18, r8
     6e6:	c7 01       	movw	r24, r14
     6e8:	b6 01       	movw	r22, r12
     6ea:	ae d6       	rcall	.+3420   	; 0x1448 <__addsf3>
     6ec:	15 d7       	rcall	.+3626   	; 0x1518 <__fixsfsi>
     6ee:	a2 01       	movw	r20, r4
     6f0:	ce 01       	movw	r24, r28
     6f2:	9e df       	rcall	.-196    	; 0x630 <drive_3W>
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	cf 90       	pop	r12
     700:	bf 90       	pop	r11
     702:	af 90       	pop	r10
     704:	9f 90       	pop	r9
     706:	8f 90       	pop	r8
     708:	7f 90       	pop	r7
     70a:	6f 90       	pop	r6
     70c:	5f 90       	pop	r5
     70e:	4f 90       	pop	r4
     710:	08 95       	ret

00000712 <lf_horizontal>:
     712:	4f 92       	push	r4
     714:	5f 92       	push	r5
     716:	6f 92       	push	r6
     718:	7f 92       	push	r7
     71a:	8f 92       	push	r8
     71c:	9f 92       	push	r9
     71e:	af 92       	push	r10
     720:	bf 92       	push	r11
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <lefthighcount>
     732:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <lefthighcount+0x1>
     736:	23 2b       	or	r18, r19
     738:	31 f4       	brne	.+12     	; 0x746 <lf_horizontal+0x34>
     73a:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <righthighcount>
     73e:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <righthighcount+0x1>
     742:	23 2b       	or	r18, r19
     744:	21 f1       	breq	.+72     	; 0x78e <lf_horizontal+0x7c>
     746:	ec 01       	movw	r28, r24
     748:	c0 90 7e 02 	lds	r12, 0x027E	; 0x80027e <Pl>
     74c:	d0 90 7f 02 	lds	r13, 0x027F	; 0x80027f <Pl+0x1>
     750:	e0 90 80 02 	lds	r14, 0x0280	; 0x800280 <Pl+0x2>
     754:	f0 90 81 02 	lds	r15, 0x0281	; 0x800281 <Pl+0x3>
     758:	80 90 82 02 	lds	r8, 0x0282	; 0x800282 <Pr>
     75c:	90 90 83 02 	lds	r9, 0x0283	; 0x800283 <Pr+0x1>
     760:	a0 90 84 02 	lds	r10, 0x0284	; 0x800284 <Pr+0x2>
     764:	b0 90 85 02 	lds	r11, 0x0285	; 0x800285 <Pr+0x3>
     768:	a5 01       	movw	r20, r10
     76a:	94 01       	movw	r18, r8
     76c:	c7 01       	movw	r24, r14
     76e:	b6 01       	movw	r22, r12
     770:	6a d6       	rcall	.+3284   	; 0x1446 <__subsf3>
     772:	d2 d6       	rcall	.+3492   	; 0x1518 <__fixsfsi>
     774:	2b 01       	movw	r4, r22
     776:	3c 01       	movw	r6, r24
     778:	a5 01       	movw	r20, r10
     77a:	94 01       	movw	r18, r8
     77c:	c7 01       	movw	r24, r14
     77e:	b6 01       	movw	r22, r12
     780:	63 d6       	rcall	.+3270   	; 0x1448 <__addsf3>
     782:	ca d6       	rcall	.+3476   	; 0x1518 <__fixsfsi>
     784:	dc 01       	movw	r26, r24
     786:	cb 01       	movw	r24, r22
     788:	a2 01       	movw	r20, r4
     78a:	be 01       	movw	r22, r28
     78c:	51 df       	rcall	.-350    	; 0x630 <drive_3W>
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	ff 90       	pop	r15
     794:	ef 90       	pop	r14
     796:	df 90       	pop	r13
     798:	cf 90       	pop	r12
     79a:	bf 90       	pop	r11
     79c:	af 90       	pop	r10
     79e:	9f 90       	pop	r9
     7a0:	8f 90       	pop	r8
     7a2:	7f 90       	pop	r7
     7a4:	6f 90       	pop	r6
     7a6:	5f 90       	pop	r5
     7a8:	4f 90       	pop	r4
     7aa:	08 95       	ret

000007ac <lf_nodealign>:
     7ac:	4f 92       	push	r4
     7ae:	5f 92       	push	r5
     7b0:	6f 92       	push	r6
     7b2:	7f 92       	push	r7
     7b4:	8f 92       	push	r8
     7b6:	9f 92       	push	r9
     7b8:	af 92       	push	r10
     7ba:	bf 92       	push	r11
     7bc:	cf 92       	push	r12
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
     7cc:	28 97       	sbiw	r28, 0x08	; 8
     7ce:	0f b6       	in	r0, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	80 90 68 02 	lds	r8, 0x0268	; 0x800268 <Pf>
     7dc:	90 90 69 02 	lds	r9, 0x0269	; 0x800269 <Pf+0x1>
     7e0:	a0 90 6a 02 	lds	r10, 0x026A	; 0x80026a <Pf+0x2>
     7e4:	b0 90 6b 02 	lds	r11, 0x026B	; 0x80026b <Pf+0x3>
     7e8:	40 90 64 02 	lds	r4, 0x0264	; 0x800264 <Pb>
     7ec:	50 90 65 02 	lds	r5, 0x0265	; 0x800265 <Pb+0x1>
     7f0:	60 90 66 02 	lds	r6, 0x0266	; 0x800266 <Pb+0x2>
     7f4:	70 90 67 02 	lds	r7, 0x0267	; 0x800267 <Pb+0x3>
     7f8:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <Pl>
     7fc:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <Pl+0x1>
     800:	a0 91 80 02 	lds	r26, 0x0280	; 0x800280 <Pl+0x2>
     804:	b0 91 81 02 	lds	r27, 0x0281	; 0x800281 <Pl+0x3>
     808:	89 83       	std	Y+1, r24	; 0x01
     80a:	9a 83       	std	Y+2, r25	; 0x02
     80c:	ab 83       	std	Y+3, r26	; 0x03
     80e:	bc 83       	std	Y+4, r27	; 0x04
     810:	c0 90 82 02 	lds	r12, 0x0282	; 0x800282 <Pr>
     814:	d0 90 83 02 	lds	r13, 0x0283	; 0x800283 <Pr+0x1>
     818:	e0 90 84 02 	lds	r14, 0x0284	; 0x800284 <Pr+0x2>
     81c:	f0 90 85 02 	lds	r15, 0x0285	; 0x800285 <Pr+0x3>
     820:	a3 01       	movw	r20, r6
     822:	92 01       	movw	r18, r4
     824:	c5 01       	movw	r24, r10
     826:	b4 01       	movw	r22, r8
     828:	0e d6       	rcall	.+3100   	; 0x1446 <__subsf3>
     82a:	29 81       	ldd	r18, Y+1	; 0x01
     82c:	3a 81       	ldd	r19, Y+2	; 0x02
     82e:	4b 81       	ldd	r20, Y+3	; 0x03
     830:	5c 81       	ldd	r21, Y+4	; 0x04
     832:	0a d6       	rcall	.+3092   	; 0x1448 <__addsf3>
     834:	a7 01       	movw	r20, r14
     836:	96 01       	movw	r18, r12
     838:	06 d6       	rcall	.+3084   	; 0x1446 <__subsf3>
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	5f e3       	ldi	r21, 0x3F	; 63
     842:	4d d7       	rcall	.+3738   	; 0x16de <__mulsf3>
     844:	69 d6       	rcall	.+3282   	; 0x1518 <__fixsfsi>
     846:	6d 83       	std	Y+5, r22	; 0x05
     848:	7e 83       	std	Y+6, r23	; 0x06
     84a:	8f 83       	std	Y+7, r24	; 0x07
     84c:	98 87       	std	Y+8, r25	; 0x08
     84e:	a3 01       	movw	r20, r6
     850:	92 01       	movw	r18, r4
     852:	c5 01       	movw	r24, r10
     854:	b4 01       	movw	r22, r8
     856:	f8 d5       	rcall	.+3056   	; 0x1448 <__addsf3>
     858:	5f d6       	rcall	.+3262   	; 0x1518 <__fixsfsi>
     85a:	4b 01       	movw	r8, r22
     85c:	5c 01       	movw	r10, r24
     85e:	a7 01       	movw	r20, r14
     860:	96 01       	movw	r18, r12
     862:	69 81       	ldd	r22, Y+1	; 0x01
     864:	7a 81       	ldd	r23, Y+2	; 0x02
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	ee d5       	rcall	.+3036   	; 0x1448 <__addsf3>
     86c:	55 d6       	rcall	.+3242   	; 0x1518 <__fixsfsi>
     86e:	dc 01       	movw	r26, r24
     870:	cb 01       	movw	r24, r22
     872:	4d 81       	ldd	r20, Y+5	; 0x05
     874:	5e 81       	ldd	r21, Y+6	; 0x06
     876:	b4 01       	movw	r22, r8
     878:	db de       	rcall	.-586    	; 0x630 <drive_3W>
     87a:	28 96       	adiw	r28, 0x08	; 8
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	bf 90       	pop	r11
     894:	af 90       	pop	r10
     896:	9f 90       	pop	r9
     898:	8f 90       	pop	r8
     89a:	7f 90       	pop	r7
     89c:	6f 90       	pop	r6
     89e:	5f 90       	pop	r5
     8a0:	4f 90       	pop	r4
     8a2:	08 95       	ret

000008a4 <manual>:
     8a4:	40 91 1c 03 	lds	r20, 0x031C	; 0x80031c <xj2>
     8a8:	50 91 1d 03 	lds	r21, 0x031D	; 0x80031d <xj2+0x1>
     8ac:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <yj2>
     8b0:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <yj2+0x1>
     8b4:	48 0f       	add	r20, r24
     8b6:	59 1f       	adc	r21, r25
     8b8:	55 23       	and	r21, r21
     8ba:	14 f4       	brge	.+4      	; 0x8c0 <manual+0x1c>
     8bc:	4f 5f       	subi	r20, 0xFF	; 255
     8be:	5f 4f       	sbci	r21, 0xFF	; 255
     8c0:	55 95       	asr	r21
     8c2:	47 95       	ror	r20
     8c4:	60 91 1e 03 	lds	r22, 0x031E	; 0x80031e <yj1>
     8c8:	70 91 1f 03 	lds	r23, 0x031F	; 0x80031f <yj1+0x1>
     8cc:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <xj1>
     8d0:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <xj1+0x1>
     8d4:	ad ce       	rjmp	.-678    	; 0x630 <drive_3W>
     8d6:	08 95       	ret

000008d8 <pwm_init>:

void pwm_init()
{
	TCCR3A |= (1<<COM3A1)|(1<<COM3B1)|(1<<COM3C1)|(1<<WGM30);
     8d8:	e0 e9       	ldi	r30, 0x90	; 144
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	89 6a       	ori	r24, 0xA9	; 169
     8e0:	80 83       	st	Z, r24
	TCCR3B |= (1<<CS32)|(1<<CS30)|(1<<WGM32);
     8e2:	e1 e9       	ldi	r30, 0x91	; 145
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	8d 60       	ori	r24, 0x0D	; 13
     8ea:	80 83       	st	Z, r24
     8ec:	08 95       	ret

000008ee <ADC_initiate>:
}

void ADC_initiate()
{
	ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<ADLAR);  // AVcc //  right adjusted
     8ee:	80 e4       	ldi	r24, 0x40	; 64
     8f0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRA = (1<<ADEN)|(0<<ADATE)|(0<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // bit4 ADC EOC flag // prescalar- 111 - 128 division factor
     8f4:	87 e8       	ldi	r24, 0x87	; 135
     8f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
	ADCSRB = 0x00;
     8fa:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     8fe:	08 95       	ret

00000900 <ADC_read>:
}

uint16_t ADC_read(uint8_t ch)
{
	ADMUX = ADMUX & 0b11100000;    //Clearing all the mux
     900:	ec e7       	ldi	r30, 0x7C	; 124
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	90 81       	ld	r25, Z
     906:	90 7e       	andi	r25, 0xE0	; 224
     908:	90 83       	st	Z, r25
	ADCSRB = ADCSRB & 0b11110111;  //------"-"-----------
     90a:	eb e7       	ldi	r30, 0x7B	; 123
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	90 81       	ld	r25, Z
     910:	97 7f       	andi	r25, 0xF7	; 247
     912:	90 83       	st	Z, r25
	ch = ch & 0b00001111;
     914:	98 2f       	mov	r25, r24
     916:	9f 70       	andi	r25, 0x0F	; 15
	if ( ch <= 7 )
     918:	98 30       	cpi	r25, 0x08	; 8
     91a:	48 f4       	brcc	.+18     	; 0x92e <ADC_read+0x2e>
	{
		ch = ch & 0b00000111; //
		ADMUX = ADMUX | ch;
     91c:	ec e7       	ldi	r30, 0x7C	; 124
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	90 81       	ld	r25, Z
     922:	87 70       	andi	r24, 0x07	; 7
     924:	89 2b       	or	r24, r25
     926:	80 83       	st	Z, r24
		ADCSRB=0x00;
     928:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
     92c:	0c c0       	rjmp	.+24     	; 0x946 <ADC_read+0x46>
	}
	else
	{
		ch = ch-8;
		ch = ch & 0b00000111;
		ADMUX = ADMUX | ch;
     92e:	ec e7       	ldi	r30, 0x7C	; 124
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	80 81       	ld	r24, Z
     934:	97 70       	andi	r25, 0x07	; 7
     936:	98 2b       	or	r25, r24
     938:	90 83       	st	Z, r25
		ADCSRB=0x00;
     93a:	eb e7       	ldi	r30, 0x7B	; 123
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	10 82       	st	Z, r1
		ADCSRB = ADCSRB | (1<<MUX5);
     940:	80 81       	ld	r24, Z
     942:	88 60       	ori	r24, 0x08	; 8
     944:	80 83       	st	Z, r24
	}
	
	ADCSRA = ADCSRA | (1<<ADSC);    //Bit 6 to start conversion-ADSC
     946:	ea e7       	ldi	r30, 0x7A	; 122
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	80 64       	ori	r24, 0x40	; 64
     94e:	80 83       	st	Z, r24
	
	while( !(ADCSRA & (1<<ADIF)) ); // Wait for conversion to complete
     950:	80 81       	ld	r24, Z
     952:	84 ff       	sbrs	r24, 4
     954:	fd cf       	rjmp	.-6      	; 0x950 <ADC_read+0x50>
	
	return(ADC);
     956:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
     95a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	
}
     95e:	08 95       	ret

00000960 <readsensor>:
	backhighcount=0;
	backcurrent=0;
}

void readsensor()
{
     960:	af 92       	push	r10
     962:	bf 92       	push	r11
     964:	cf 92       	push	r12
     966:	df 92       	push	r13
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
	resetvar();
     974:	5b dd       	rcall	.-1354   	; 0x42c <resetvar>
     976:	0f 2e       	mov	r0, r31
     978:	f8 e9       	ldi	r31, 0x98	; 152
     97a:	ef 2e       	mov	r14, r31
     97c:	f2 e0       	ldi	r31, 0x02	; 2
     97e:	ff 2e       	mov	r15, r31
     980:	f0 2d       	mov	r31, r0
     982:	08 eb       	ldi	r16, 0xB8	; 184
     984:	12 e0       	ldi	r17, 0x02	; 2
	for (int i=0;i<8;i++)
     986:	c0 e0       	ldi	r28, 0x00	; 0
     988:	d0 e0       	ldi	r29, 0x00	; 0
		sensor[i] = ADC_read(i);
		if (sensor[i]>avg_val[i])
		{
			righthighcount++;
			rightcurrent+=(i+1);
			sensright|=(1<<i);
     98a:	cc 24       	eor	r12, r12
     98c:	c3 94       	inc	r12
     98e:	d1 2c       	mov	r13, r1
void readsensor()
{
	resetvar();
	for (int i=0;i<8;i++)
	{
		sensor[i] = ADC_read(i);
     990:	8c 2f       	mov	r24, r28
     992:	b6 df       	rcall	.-148    	; 0x900 <ADC_read>
     994:	f7 01       	movw	r30, r14
     996:	81 93       	st	Z+, r24
     998:	91 93       	st	Z+, r25
     99a:	7f 01       	movw	r14, r30
		if (sensor[i]>avg_val[i])
     99c:	f8 01       	movw	r30, r16
     99e:	21 91       	ld	r18, Z+
     9a0:	31 91       	ld	r19, Z+
     9a2:	8f 01       	movw	r16, r30
     9a4:	28 17       	cp	r18, r24
     9a6:	39 07       	cpc	r19, r25
     9a8:	08 f5       	brcc	.+66     	; 0x9ec <readsensor+0x8c>
		{
			righthighcount++;
     9aa:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <righthighcount>
     9ae:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <righthighcount+0x1>
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <righthighcount+0x1>
     9b8:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <righthighcount>
			rightcurrent+=(i+1);
     9bc:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <rightcurrent>
     9c0:	30 91 93 02 	lds	r19, 0x0293	; 0x800293 <rightcurrent+0x1>
     9c4:	ce 01       	movw	r24, r28
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	82 0f       	add	r24, r18
     9ca:	93 1f       	adc	r25, r19
     9cc:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <rightcurrent+0x1>
     9d0:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <rightcurrent>
			sensright|=(1<<i);
     9d4:	20 91 97 02 	lds	r18, 0x0297	; 0x800297 <sensright>
     9d8:	c6 01       	movw	r24, r12
     9da:	0c 2e       	mov	r0, r28
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <readsensor+0x82>
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	0a 94       	dec	r0
     9e4:	e2 f7       	brpl	.-8      	; 0x9de <readsensor+0x7e>
     9e6:	82 2b       	or	r24, r18
     9e8:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <sensright>
}

void readsensor()
{
	resetvar();
	for (int i=0;i<8;i++)
     9ec:	21 96       	adiw	r28, 0x01	; 1
     9ee:	c8 30       	cpi	r28, 0x08	; 8
     9f0:	d1 05       	cpc	r29, r1
     9f2:	71 f6       	brne	.-100    	; 0x990 <readsensor+0x30>
     9f4:	0f 2e       	mov	r0, r31
     9f6:	f8 ea       	ldi	r31, 0xA8	; 168
     9f8:	cf 2e       	mov	r12, r31
     9fa:	f2 e0       	ldi	r31, 0x02	; 2
     9fc:	df 2e       	mov	r13, r31
     9fe:	f0 2d       	mov	r31, r0
     a00:	0f 2e       	mov	r0, r31
     a02:	f8 ec       	ldi	r31, 0xC8	; 200
     a04:	ef 2e       	mov	r14, r31
     a06:	f2 e0       	ldi	r31, 0x02	; 2
     a08:	ff 2e       	mov	r15, r31
     a0a:	f0 2d       	mov	r31, r0
     a0c:	18 e0       	ldi	r17, 0x08	; 8
     a0e:	c0 e0       	ldi	r28, 0x00	; 0
     a10:	d0 e0       	ldi	r29, 0x00	; 0
		sensor[i]=ADC_read(i);
		if (sensor[i]>avg_val[i])
		{
			lefthighcount++;
			leftcurrent+=(i-7);
			sensleft|=(1<<(i-8));
     a12:	aa 24       	eor	r10, r10
     a14:	a3 94       	inc	r10
			sensright|=(1<<i);
		}
	}
	for (int i=8;i<16;i++)
	{
		sensor[i]=ADC_read(i);
     a16:	b1 2c       	mov	r11, r1
     a18:	81 2f       	mov	r24, r17
     a1a:	72 df       	rcall	.-284    	; 0x900 <ADC_read>
     a1c:	f6 01       	movw	r30, r12
     a1e:	81 93       	st	Z+, r24
     a20:	91 93       	st	Z+, r25
     a22:	6f 01       	movw	r12, r30
		if (sensor[i]>avg_val[i])
     a24:	f7 01       	movw	r30, r14
     a26:	21 91       	ld	r18, Z+
     a28:	31 91       	ld	r19, Z+
     a2a:	7f 01       	movw	r14, r30
     a2c:	28 17       	cp	r18, r24
     a2e:	39 07       	cpc	r19, r25
     a30:	08 f5       	brcc	.+66     	; 0xa74 <readsensor+0x114>
		{
			lefthighcount++;
     a32:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <lefthighcount>
     a36:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <lefthighcount+0x1>
     a3a:	01 96       	adiw	r24, 0x01	; 1
     a3c:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <lefthighcount+0x1>
     a40:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <lefthighcount>
			leftcurrent+=(i-7);
     a44:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <leftcurrent>
     a48:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <leftcurrent+0x1>
     a4c:	ce 01       	movw	r24, r28
     a4e:	01 96       	adiw	r24, 0x01	; 1
     a50:	82 0f       	add	r24, r18
     a52:	93 1f       	adc	r25, r19
     a54:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <leftcurrent+0x1>
     a58:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <leftcurrent>
			sensleft|=(1<<(i-8));
     a5c:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <sensleft>
     a60:	c5 01       	movw	r24, r10
     a62:	0c 2e       	mov	r0, r28
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <readsensor+0x10a>
     a66:	88 0f       	add	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	0a 94       	dec	r0
     a6c:	e2 f7       	brpl	.-8      	; 0xa66 <readsensor+0x106>
     a6e:	82 2b       	or	r24, r18
     a70:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <sensleft>
     a74:	21 96       	adiw	r28, 0x01	; 1
     a76:	1f 5f       	subi	r17, 0xFF	; 255
			righthighcount++;
			rightcurrent+=(i+1);
			sensright|=(1<<i);
		}
	}
	for (int i=8;i<16;i++)
     a78:	c8 30       	cpi	r28, 0x08	; 8
     a7a:	d1 05       	cpc	r29, r1
     a7c:	69 f6       	brne	.-102    	; 0xa18 <readsensor+0xb8>
			leftcurrent+=(i-7);
			sensleft|=(1<<(i-8));
		}
	}
	#ifdef lf_indicator
	indicator_port1=sensright;
     a7e:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <sensright>
     a82:	8b b9       	out	0x0b, r24	; 11
	indicator_port2=sensleft;
     a84:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <sensleft>
     a88:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	#endif
	
	in_front=input_port_front;
     a8c:	20 b1       	in	r18, 0x00	; 0
     a8e:	20 93 2c 03 	sts	0x032C, r18	; 0x80032c <in_front>
	in_back=input_port_back;
     a92:	36 b1       	in	r19, 0x06	; 6
     a94:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <fronthighcount>
     a98:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <fronthighcount+0x1>
     a9c:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <frontcurrent>
     aa0:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <frontcurrent+0x1>
     aa4:	40 91 7d 02 	lds	r20, 0x027D	; 0x80027d <sensfront>
	for (int i=0;i<8;i++)
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (in_front & 0x01)
		{
			fronthighcount++;
			frontcurrent+=(i+1);
			sensfront|=(1<<i);
     aac:	c1 e0       	ldi	r28, 0x01	; 1
     aae:	d0 e0       	ldi	r29, 0x00	; 0
	
	in_front=input_port_front;
	in_back=input_port_back;
	for (int i=0;i<8;i++)
	{
		if (in_front & 0x01)
     ab0:	20 ff       	sbrs	r18, 0
     ab2:	0d c0       	rjmp	.+26     	; 0xace <readsensor+0x16e>
		{
			fronthighcount++;
     ab4:	31 96       	adiw	r30, 0x01	; 1
			frontcurrent+=(i+1);
     ab6:	dc 01       	movw	r26, r24
     ab8:	11 96       	adiw	r26, 0x01	; 1
     aba:	6a 0f       	add	r22, r26
     abc:	7b 1f       	adc	r23, r27
			sensfront|=(1<<i);
     abe:	de 01       	movw	r26, r28
     ac0:	08 2e       	mov	r0, r24
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <readsensor+0x168>
     ac4:	aa 0f       	add	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	0a 94       	dec	r0
     aca:	e2 f7       	brpl	.-8      	; 0xac4 <readsensor+0x164>
     acc:	4a 2b       	or	r20, r26
		}
		in_front=(in_front>>1);
     ace:	26 95       	lsr	r18
	indicator_port2=sensleft;
	#endif
	
	in_front=input_port_front;
	in_back=input_port_back;
	for (int i=0;i<8;i++)
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	88 30       	cpi	r24, 0x08	; 8
     ad4:	91 05       	cpc	r25, r1
     ad6:	61 f7       	brne	.-40     	; 0xab0 <readsensor+0x150>
     ad8:	20 93 2c 03 	sts	0x032C, r18	; 0x80032c <in_front>
     adc:	f0 93 7b 02 	sts	0x027B, r31	; 0x80027b <fronthighcount+0x1>
     ae0:	e0 93 7a 02 	sts	0x027A, r30	; 0x80027a <fronthighcount>
     ae4:	70 93 79 02 	sts	0x0279, r23	; 0x800279 <frontcurrent+0x1>
     ae8:	60 93 78 02 	sts	0x0278, r22	; 0x800278 <frontcurrent>
     aec:	40 93 7d 02 	sts	0x027D, r20	; 0x80027d <sensfront>
     af0:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <backhighcount>
     af4:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <backhighcount+0x1>
     af8:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <backcurrent>
     afc:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <backcurrent+0x1>
     b00:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <sensback>
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (in_back & 0x01)
		{
			backhighcount++;
			backcurrent+=(i+1);
			sensback|=(1<<i);
     b08:	a1 e0       	ldi	r26, 0x01	; 1
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
		}
		in_front=(in_front>>1);
	}
	for (int i=0;i<8;i++)
	{
		if (in_back & 0x01)
     b0c:	30 ff       	sbrs	r19, 0
     b0e:	0e c0       	rjmp	.+28     	; 0xb2c <readsensor+0x1cc>
		{
			backhighcount++;
     b10:	6f 5f       	subi	r22, 0xFF	; 255
     b12:	7f 4f       	sbci	r23, 0xFF	; 255
			backcurrent+=(i+1);
     b14:	fc 01       	movw	r30, r24
     b16:	31 96       	adiw	r30, 0x01	; 1
     b18:	4e 0f       	add	r20, r30
     b1a:	5f 1f       	adc	r21, r31
			sensback|=(1<<i);
     b1c:	fd 01       	movw	r30, r26
     b1e:	08 2e       	mov	r0, r24
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <readsensor+0x1c6>
     b22:	ee 0f       	add	r30, r30
     b24:	ff 1f       	adc	r31, r31
     b26:	0a 94       	dec	r0
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <readsensor+0x1c2>
     b2a:	2e 2b       	or	r18, r30
		}
		in_back=(in_back>>1);
     b2c:	36 95       	lsr	r19
			frontcurrent+=(i+1);
			sensfront|=(1<<i);
		}
		in_front=(in_front>>1);
	}
	for (int i=0;i<8;i++)
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	88 30       	cpi	r24, 0x08	; 8
     b32:	91 05       	cpc	r25, r1
     b34:	59 f7       	brne	.-42     	; 0xb0c <readsensor+0x1ac>
     b36:	30 93 2a 03 	sts	0x032A, r19	; 0x80032a <in_back>
     b3a:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <backhighcount+0x1>
     b3e:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <backhighcount>
     b42:	50 93 75 02 	sts	0x0275, r21	; 0x800275 <backcurrent+0x1>
     b46:	40 93 74 02 	sts	0x0274, r20	; 0x800274 <backcurrent>
     b4a:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <sensback>
	}
	#ifdef lf_receive_test
	indicator_port1=sensfront;
	indicator_port2=sensback;
	#endif
}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	bf 90       	pop	r11
     b60:	af 90       	pop	r10
     b62:	08 95       	ret

00000b64 <line_PID>:
	drive_3W(xj1,yj1,((xj2+yj2)/2));
}

void line_PID()
{
	resetvar();
     b64:	63 dc       	rcall	.-1850   	; 0x42c <resetvar>
	readsensor();
     b66:	fc de       	rcall	.-520    	; 0x960 <readsensor>
     b68:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <righthighcount>
	if (righthighcount)
     b6c:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <righthighcount+0x1>
     b70:	89 2b       	or	r24, r25
     b72:	11 f0       	breq	.+4      	; 0xb78 <line_PID+0x14>
	{
		rightproportional();
     b74:	7b db       	rcall	.-2314   	; 0x26c <rightproportional>
     b76:	08 c0       	rjmp	.+16     	; 0xb88 <line_PID+0x24>
     b78:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <Pr>
	}
	else
	{
		Pr=0;
     b7c:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <Pr+0x1>
     b80:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <Pr+0x2>
     b84:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <Pr+0x3>
     b88:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <lefthighcount>
	}
	if (lefthighcount)
     b8c:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <lefthighcount+0x1>
     b90:	89 2b       	or	r24, r25
     b92:	11 f0       	breq	.+4      	; 0xb98 <line_PID+0x34>
	{
		leftproportional();
     b94:	a2 db       	rcall	.-2236   	; 0x2da <leftproportional>
     b96:	08 c0       	rjmp	.+16     	; 0xba8 <line_PID+0x44>
     b98:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <Pl>
	}
	else
	{
		Pl=0;
     b9c:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <Pl+0x1>
     ba0:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <Pl+0x2>
     ba4:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <Pl+0x3>
     ba8:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <fronthighcount>
	}
	if (fronthighcount)
     bac:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <fronthighcount+0x1>
     bb0:	89 2b       	or	r24, r25
     bb2:	11 f0       	breq	.+4      	; 0xbb8 <line_PID+0x54>
	{
		frontproportional();
     bb4:	c9 db       	rcall	.-2158   	; 0x348 <frontproportional>
     bb6:	08 c0       	rjmp	.+16     	; 0xbc8 <line_PID+0x64>
     bb8:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <Pf>
	}
	else
	{
		Pf=0;
     bbc:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <Pf+0x1>
     bc0:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <Pf+0x2>
     bc4:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <Pf+0x3>
     bc8:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <backhighcount>
	}
	if (backhighcount)
     bcc:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <backhighcount+0x1>
     bd0:	89 2b       	or	r24, r25
     bd2:	11 f0       	breq	.+4      	; 0xbd8 <line_PID+0x74>
	{
		backproportional();
     bd4:	f2 cb       	rjmp	.-2076   	; 0x3ba <backproportional>
     bd6:	08 95       	ret
     bd8:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <Pb>
	}
	else
	{
		Pb=0;
     bdc:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <Pb+0x1>
     be0:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <Pb+0x2>
     be4:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <Pb+0x3>
     be8:	08 95       	ret

00000bea <calibrate>:
     bea:	6f 92       	push	r6
	indicator_port2=sensback;
	#endif
}

void calibrate()
{
     bec:	7f 92       	push	r7
     bee:	8f 92       	push	r8
     bf0:	9f 92       	push	r9
     bf2:	af 92       	push	r10
     bf4:	bf 92       	push	r11
     bf6:	cf 92       	push	r12
     bf8:	df 92       	push	r13
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
	indicator_port2=0x00;
     c04:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
     c08:	0f 2e       	mov	r0, r31
     c0a:	f8 ed       	ldi	r31, 0xD8	; 216
     c0c:	ef 2e       	mov	r14, r31
     c0e:	f2 e0       	ldi	r31, 0x02	; 2
     c10:	ff 2e       	mov	r15, r31
     c12:	f0 2d       	mov	r31, r0
     c14:	0f 2e       	mov	r0, r31
     c16:	f0 e2       	ldi	r31, 0x20	; 32
     c18:	cf 2e       	mov	r12, r31
     c1a:	f2 e0       	ldi	r31, 0x02	; 2
     c1c:	df 2e       	mov	r13, r31
     c1e:	f0 2d       	mov	r31, r0
     c20:	0f 2e       	mov	r0, r31
     c22:	f8 ef       	ldi	r31, 0xF8	; 248
     c24:	af 2e       	mov	r10, r31
     c26:	f2 e0       	ldi	r31, 0x02	; 2
     c28:	bf 2e       	mov	r11, r31
     c2a:	f0 2d       	mov	r31, r0
     c2c:	d6 01       	movw	r26, r12
     c2e:	f7 01       	movw	r30, r14
	for (int i=0;i<16;i++)
	{
		max_val[i]=0;
		min_val[i]=1000;
     c30:	88 ee       	ldi	r24, 0xE8	; 232
     c32:	93 e0       	ldi	r25, 0x03	; 3
void calibrate()
{
	indicator_port2=0x00;
	for (int i=0;i<16;i++)
	{
		max_val[i]=0;
     c34:	11 92       	st	Z+, r1
     c36:	11 92       	st	Z+, r1
		min_val[i]=1000;
     c38:	8d 93       	st	X+, r24
     c3a:	9d 93       	st	X+, r25
}

void calibrate()
{
	indicator_port2=0x00;
	for (int i=0;i<16;i++)
     c3c:	ea 15       	cp	r30, r10
     c3e:	fb 05       	cpc	r31, r11
     c40:	c9 f7       	brne	.-14     	; 0xc34 <calibrate+0x4a>
	{
		max_val[i]=0;
		min_val[i]=1000;
	}
	drive_3W(0,0,0);
     c42:	40 e0       	ldi	r20, 0x00	; 0
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	f0 dc       	rcall	.-1568   	; 0x630 <drive_3W>
	indicator_port1=0xFF;
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	8b b9       	out	0x0b, r24	; 11
     c54:	0f 2e       	mov	r0, r31
     c56:	f9 eb       	ldi	r31, 0xB9	; 185
     c58:	6f 2e       	mov	r6, r31
     c5a:	fb e0       	ldi	r31, 0x0B	; 11
     c5c:	7f 2e       	mov	r7, r31
     c5e:	f0 2d       	mov	r31, r0
     c60:	27 c0       	rjmp	.+78     	; 0xcb0 <calibrate+0xc6>
	for(int j=0;j<=3000;j++)
	{
		for(int n=0;n<=15;n++)  //calibrate
		{
			val = ADC_read(n);
     c62:	81 2f       	mov	r24, r17
     c64:	4d de       	rcall	.-870    	; 0x900 <ADC_read>
     c66:	90 93 f9 02 	sts	0x02F9, r25	; 0x8002f9 <val+0x1>
     c6a:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <val>
			if(val >= max_val[n])
     c6e:	28 81       	ld	r18, Y
     c70:	39 81       	ldd	r19, Y+1	; 0x01
     c72:	82 17       	cp	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	18 f0       	brcs	.+6      	; 0xc7e <calibrate+0x94>
			{
				max_val[n] = val;
     c78:	99 83       	std	Y+1, r25	; 0x01
     c7a:	88 83       	st	Y, r24
     c7c:	09 c0       	rjmp	.+18     	; 0xc90 <calibrate+0xa6>
			}
			else if(val < min_val[n])
     c7e:	d4 01       	movw	r26, r8
     c80:	2d 91       	ld	r18, X+
     c82:	3c 91       	ld	r19, X
     c84:	11 97       	sbiw	r26, 0x01	; 1
     c86:	82 17       	cp	r24, r18
     c88:	93 07       	cpc	r25, r19
     c8a:	10 f4       	brcc	.+4      	; 0xc90 <calibrate+0xa6>
			{
				min_val[n] = val;
     c8c:	8d 93       	st	X+, r24
     c8e:	9c 93       	st	X, r25
     c90:	1f 5f       	subi	r17, 0xFF	; 255
     c92:	22 96       	adiw	r28, 0x02	; 2
     c94:	b2 e0       	ldi	r27, 0x02	; 2
     c96:	8b 0e       	add	r8, r27
     c98:	91 1c       	adc	r9, r1
	}
	drive_3W(0,0,0);
	indicator_port1=0xFF;
	for(int j=0;j<=3000;j++)
	{
		for(int n=0;n<=15;n++)  //calibrate
     c9a:	10 31       	cpi	r17, 0x10	; 16
     c9c:	11 f7       	brne	.-60     	; 0xc62 <calibrate+0x78>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c9e:	e6 e6       	ldi	r30, 0x66	; 102
     ca0:	fe e0       	ldi	r31, 0x0E	; 14
     ca2:	31 97       	sbiw	r30, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <calibrate+0xb8>
     ca6:	00 00       	nop
     ca8:	f1 e0       	ldi	r31, 0x01	; 1
     caa:	6f 1a       	sub	r6, r31
     cac:	71 08       	sbc	r7, r1
		max_val[i]=0;
		min_val[i]=1000;
	}
	drive_3W(0,0,0);
	indicator_port1=0xFF;
	for(int j=0;j<=3000;j++)
     cae:	21 f0       	breq	.+8      	; 0xcb8 <calibrate+0xce>
	#endif
}

void calibrate()
{
	indicator_port2=0x00;
     cb0:	46 01       	movw	r8, r12
     cb2:	e7 01       	movw	r28, r14
     cb4:	10 e0       	ldi	r17, 0x00	; 0
     cb6:	d5 cf       	rjmp	.-86     	; 0xc62 <calibrate+0x78>
     cb8:	e8 eb       	ldi	r30, 0xB8	; 184
     cba:	f2 e0       	ldi	r31, 0x02	; 2
		}
		_delay_ms(1);
	}
	for (int n=0;n<16;n++)
	{
		avg_val[n]=((max_val[n]+min_val[n])/2);
     cbc:	d7 01       	movw	r26, r14
     cbe:	2d 91       	ld	r18, X+
     cc0:	3d 91       	ld	r19, X+
     cc2:	7d 01       	movw	r14, r26
     cc4:	d6 01       	movw	r26, r12
     cc6:	8d 91       	ld	r24, X+
     cc8:	9d 91       	ld	r25, X+
     cca:	6d 01       	movw	r12, r26
     ccc:	82 0f       	add	r24, r18
     cce:	93 1f       	adc	r25, r19
     cd0:	96 95       	lsr	r25
     cd2:	87 95       	ror	r24
     cd4:	81 93       	st	Z+, r24
     cd6:	91 93       	st	Z+, r25
				min_val[n] = val;
			}
		}
		_delay_ms(1);
	}
	for (int n=0;n<16;n++)
     cd8:	ea 14       	cp	r14, r10
     cda:	fb 04       	cpc	r15, r11
     cdc:	79 f7       	brne	.-34     	; 0xcbc <calibrate+0xd2>
	{
		avg_val[n]=((max_val[n]+min_val[n])/2);
	}
	indicator_port1=0x00;
     cde:	1b b8       	out	0x0b, r1	; 11
     ce0:	bf ef       	ldi	r27, 0xFF	; 255
     ce2:	ef ef       	ldi	r30, 0xFF	; 255
     ce4:	fc e2       	ldi	r31, 0x2C	; 44
     ce6:	b1 50       	subi	r27, 0x01	; 1
     ce8:	e0 40       	sbci	r30, 0x00	; 0
     cea:	f0 40       	sbci	r31, 0x00	; 0
     cec:	e1 f7       	brne	.-8      	; 0xce6 <calibrate+0xfc>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <calibrate+0x106>
     cf0:	00 00       	nop
	_delay_ms(1000);
}
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	ff 90       	pop	r15
     cfa:	ef 90       	pop	r14
     cfc:	df 90       	pop	r13
     cfe:	cf 90       	pop	r12
     d00:	bf 90       	pop	r11
     d02:	af 90       	pop	r10
     d04:	9f 90       	pop	r9
     d06:	8f 90       	pop	r8
     d08:	7f 90       	pop	r7
     d0a:	6f 90       	pop	r6
     d0c:	08 95       	ret

00000d0e <serialstart_3>:
	
}

void serialstart_3()
{
	UBRR3H=BAUDRATE>>8;
     d0e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
	UBRR3L=BAUDRATE;
     d12:	8f e5       	ldi	r24, 0x5F	; 95
     d14:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
	UCSR3B=0b10011000;//enable RXEN TXEN
     d18:	88 e9       	ldi	r24, 0x98	; 152
     d1a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <__TEXT_REGION_LENGTH__+0x700131>
	UCSR3C=0b00000110;// UCSZ1 UCSZ0
     d1e:	86 e0       	ldi	r24, 0x06	; 6
     d20:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__TEXT_REGION_LENGTH__+0x700132>
     d24:	08 95       	ret

00000d26 <__vector_54>:
}

ISR(USART3_RX_vect)
{
     d26:	1f 92       	push	r1
     d28:	0f 92       	push	r0
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	0f 92       	push	r0
     d2e:	11 24       	eor	r1, r1
     d30:	0b b6       	in	r0, 0x3b	; 59
     d32:	0f 92       	push	r0
     d34:	2f 93       	push	r18
     d36:	3f 93       	push	r19
     d38:	4f 93       	push	r20
     d3a:	5f 93       	push	r21
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31
	RX_count=1;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <RX_count+0x1>
     d50:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <RX_count>
	RX_raw=UDR3;
     d54:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
     d58:	8e 2f       	mov	r24, r30
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <RX_raw+0x1>
     d60:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <RX_raw>
	if ((RX_raw>200) && (RX_raw<255))					//201 to 216 for addresses of analog values, 231 to 246 for buttons;
     d64:	ac 01       	movw	r20, r24
     d66:	9c 01       	movw	r18, r24
     d68:	29 5c       	subi	r18, 0xC9	; 201
     d6a:	31 09       	sbc	r19, r1
     d6c:	26 33       	cpi	r18, 0x36	; 54
     d6e:	31 05       	cpc	r19, r1
     d70:	98 f4       	brcc	.+38     	; 0xd98 <__vector_54+0x72>
	{
		RX_ad=RX_raw;
     d72:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <RX_ad+0x1>
     d76:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <RX_ad>
		if ((RX_raw>230) && (RX_raw<247))
     d7a:	87 5e       	subi	r24, 0xE7	; 231
     d7c:	91 09       	sbc	r25, r1
     d7e:	40 97       	sbiw	r24, 0x10	; 16
     d80:	b8 f4       	brcc	.+46     	; 0xdb0 <__vector_54+0x8a>
		{
			uint8_t r_temp0=(RX_raw-231);
			butt[r_temp0]=1;
     d82:	e7 5e       	subi	r30, 0xE7	; 231
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	e6 50       	subi	r30, 0x06	; 6
     d8c:	fd 4f       	sbci	r31, 0xFD	; 253
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	91 83       	std	Z+1, r25	; 0x01
     d94:	80 83       	st	Z, r24
     d96:	0c c0       	rjmp	.+24     	; 0xdb0 <__vector_54+0x8a>
		}
	}
	else if ((RX_raw>=0) && (RX_raw<201))
     d98:	49 3c       	cpi	r20, 0xC9	; 201
     d9a:	51 05       	cpc	r21, r1
     d9c:	48 f4       	brcc	.+18     	; 0xdb0 <__vector_54+0x8a>
	{
		uint8_t r_temp1=(RX_ad-201);
     d9e:	a0 91 44 02 	lds	r26, 0x0244	; 0x800244 <RX_ad>
     da2:	a9 5c       	subi	r26, 0xC9	; 201
		if (r_temp1<16)
     da4:	a0 31       	cpi	r26, 0x10	; 16
     da6:	20 f4       	brcc	.+8      	; 0xdb0 <__vector_54+0x8a>
		{
			RX[r_temp1]=RX_raw;
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	a6 5b       	subi	r26, 0xB6	; 182
     dac:	bd 4f       	sbci	r27, 0xFD	; 253
     dae:	ec 93       	st	X, r30
		}
	}
}
     db0:	ff 91       	pop	r31
     db2:	ef 91       	pop	r30
     db4:	bf 91       	pop	r27
     db6:	af 91       	pop	r26
     db8:	9f 91       	pop	r25
     dba:	8f 91       	pop	r24
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0b be       	out	0x3b, r0	; 59
     dc8:	0f 90       	pop	r0
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	0f 90       	pop	r0
     dce:	1f 90       	pop	r1
     dd0:	18 95       	reti

00000dd2 <errormove>:
	}
}

void errormove()
{
	drive_3W(0,0,0);
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	28 dc       	rcall	.-1968   	; 0x630 <drive_3W>
	indicator_port1=0xFF;
     de0:	8f ef       	ldi	r24, 0xFF	; 255
     de2:	8b b9       	out	0x0b, r24	; 11
	indicator_port2=0x00;
     de4:	e2 e0       	ldi	r30, 0x02	; 2
     de6:	f1 e0       	ldi	r31, 0x01	; 1
     de8:	10 82       	st	Z, r1
     dea:	2f ef       	ldi	r18, 0xFF	; 255
     dec:	3f ef       	ldi	r19, 0xFF	; 255
     dee:	9c e2       	ldi	r25, 0x2C	; 44
     df0:	21 50       	subi	r18, 0x01	; 1
     df2:	30 40       	sbci	r19, 0x00	; 0
     df4:	90 40       	sbci	r25, 0x00	; 0
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <errormove+0x1e>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <errormove+0x28>
     dfa:	00 00       	nop
	_delay_ms(1000);
	indicator_port1=0x00;
     dfc:	1b b8       	out	0x0b, r1	; 11
	indicator_port2=0xFF;
     dfe:	80 83       	st	Z, r24
     e00:	2f ef       	ldi	r18, 0xFF	; 255
     e02:	3f ef       	ldi	r19, 0xFF	; 255
     e04:	8c e2       	ldi	r24, 0x2C	; 44
     e06:	21 50       	subi	r18, 0x01	; 1
     e08:	30 40       	sbci	r19, 0x00	; 0
     e0a:	80 40       	sbci	r24, 0x00	; 0
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <errormove+0x34>
     e0e:	00 c0       	rjmp	.+0      	; 0xe10 <errormove+0x3e>
     e10:	00 00       	nop
	_delay_ms(1000);
	lf_mode=0;
     e12:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <lf_mode+0x1>
     e16:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <lf_mode>
     e1a:	08 95       	ret

00000e1c <task>:
	voltage_val=map_value(voltage_val,0,63,15,-15);
// 	indicator_port2=voltage_val;
}

void task()
{
     e1c:	8f 92       	push	r8
     e1e:	9f 92       	push	r9
     e20:	af 92       	push	r10
     e22:	bf 92       	push	r11
     e24:	cf 92       	push	r12
     e26:	df 92       	push	r13
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
	line_PID();
     e30:	99 de       	rcall	.-718    	; 0xb64 <line_PID>
	switch (lf_mode) {
     e32:	e0 91 60 02 	lds	r30, 0x0260	; 0x800260 <lf_mode>
     e36:	f0 91 61 02 	lds	r31, 0x0261	; 0x800261 <lf_mode+0x1>
     e3a:	e0 31       	cpi	r30, 0x10	; 16
     e3c:	f1 05       	cpc	r31, r1
     e3e:	08 f0       	brcs	.+2      	; 0xe42 <task+0x26>
     e40:	42 c1       	rjmp	.+644    	; 0x10c6 <task+0x2aa>
     e42:	88 27       	eor	r24, r24
     e44:	ee 58       	subi	r30, 0x8E	; 142
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	8f 4f       	sbci	r24, 0xFF	; 255
		case 0:
			voltageread();
     e4a:	db c4       	rjmp	.+2486   	; 0x1802 <__tablejump2__>
			PORTL=0x00;
     e4c:	7d d9       	rcall	.-3334   	; 0x148 <voltageread>
     e4e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
			manual();
		break;
     e52:	28 dd       	rcall	.-1456   	; 0x8a4 <manual>
		case 1:
			lf_horizontal(40);
     e54:	39 c1       	rjmp	.+626    	; 0x10c8 <task+0x2ac>
     e56:	88 e2       	ldi	r24, 0x28	; 40
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	5b dc       	rcall	.-1866   	; 0x712 <lf_horizontal>
			if (lefthighcount>5)
     e5c:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <lefthighcount>
     e60:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <lefthighcount+0x1>
     e64:	06 97       	sbiw	r24, 0x06	; 6
     e66:	0c f4       	brge	.+2      	; 0xe6a <task+0x4e>
     e68:	2f c1       	rjmp	.+606    	; 0x10c8 <task+0x2ac>
			{
				lf_mode++;
     e6a:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <lf_mode>
     e6e:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <lf_mode+0x1>
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <lf_mode+0x1>
     e78:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <lf_mode>
     e7c:	25 c1       	rjmp	.+586    	; 0x10c8 <task+0x2ac>
			}
		break;
		case 2:
			lf_horizontal(30+voltage_val);
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 ef       	ldi	r20, 0xF0	; 240
     e84:	51 e4       	ldi	r21, 0x41	; 65
     e86:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <__data_end>
     e8a:	70 91 5b 02 	lds	r23, 0x025B	; 0x80025b <__data_end+0x1>
     e8e:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end+0x2>
     e92:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <__data_end+0x3>
     e96:	d8 d2       	rcall	.+1456   	; 0x1448 <__addsf3>
     e98:	3f d3       	rcall	.+1662   	; 0x1518 <__fixsfsi>
     e9a:	cb 01       	movw	r24, r22
     e9c:	3a dc       	rcall	.-1932   	; 0x712 <lf_horizontal>
			if (backhighcount)
     e9e:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <backhighcount>
     ea2:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <backhighcount+0x1>
     ea6:	89 2b       	or	r24, r25
     ea8:	09 f4       	brne	.+2      	; 0xeac <task+0x90>
     eaa:	0e c1       	rjmp	.+540    	; 0x10c8 <task+0x2ac>
			{
				lf_mode++;
     eac:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <lf_mode>
     eb0:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <lf_mode+0x1>
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <lf_mode+0x1>
     eba:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <lf_mode>
			}
		break;
		case 3:
			lf_vertical(-130);
     ebe:	04 c1       	rjmp	.+520    	; 0x10c8 <task+0x2ac>
     ec0:	8e e7       	ldi	r24, 0x7E	; 126
     ec2:	9f ef       	ldi	r25, 0xFF	; 255
     ec4:	db db       	rcall	.-2122   	; 0x67c <lf_vertical>
			if (backhighcount>6)
     ec6:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <backhighcount>
     eca:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <backhighcount+0x1>
     ece:	07 97       	sbiw	r24, 0x07	; 7
     ed0:	0c f4       	brge	.+2      	; 0xed4 <task+0xb8>
     ed2:	fa c0       	rjmp	.+500    	; 0x10c8 <task+0x2ac>
			{
				lf_mode++;
     ed4:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <lf_mode>
     ed8:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <lf_mode+0x1>
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <lf_mode+0x1>
				timer2_start();
     ee2:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <lf_mode>
     ee6:	4f d9       	rcall	.-3426   	; 0x186 <timer2_start>
			}
		break;
		case 4:
			lf_vertical(0);
     ee8:	ef c0       	rjmp	.+478    	; 0x10c8 <task+0x2ac>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	c6 db       	rcall	.-2164   	; 0x67c <lf_vertical>
		break;
     ef0:	eb c0       	rjmp	.+470    	; 0x10c8 <task+0x2ac>
		case 5:
			lf_vertical(80);
     ef2:	80 e5       	ldi	r24, 0x50	; 80
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	c2 db       	rcall	.-2172   	; 0x67c <lf_vertical>
			if (Pl && Pr)
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	a9 01       	movw	r20, r18
     efe:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <Pl>
     f02:	70 91 7f 02 	lds	r23, 0x027F	; 0x80027f <Pl+0x1>
     f06:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <Pl+0x2>
     f0a:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <Pl+0x3>
     f0e:	00 d3       	rcall	.+1536   	; 0x1510 <__cmpsf2>
     f10:	88 23       	and	r24, r24
     f12:	09 f4       	brne	.+2      	; 0xf16 <task+0xfa>
     f14:	d9 c0       	rjmp	.+434    	; 0x10c8 <task+0x2ac>
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	a9 01       	movw	r20, r18
     f1c:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <Pr>
     f20:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <Pr+0x1>
     f24:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <Pr+0x2>
     f28:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <Pr+0x3>
     f2c:	f1 d2       	rcall	.+1506   	; 0x1510 <__cmpsf2>
     f2e:	88 23       	and	r24, r24
     f30:	09 f4       	brne	.+2      	; 0xf34 <task+0x118>
     f32:	ca c0       	rjmp	.+404    	; 0x10c8 <task+0x2ac>
			{
				lf_mode++;
     f34:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <lf_mode>
     f38:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <lf_mode+0x1>
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <lf_mode+0x1>
     f42:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <lf_mode>
     f46:	c0 c0       	rjmp	.+384    	; 0x10c8 <task+0x2ac>
			}
		break;
		case 6:
			lf_horizontal(0);
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	e2 db       	rcall	.-2108   	; 0x712 <lf_horizontal>
     f4e:	c0 90 86 02 	lds	r12, 0x0286	; 0x800286 <lefterror>
			if ((abs(lefterror)+abs(righterror))<3 && lefterror && righterror)
     f52:	d0 90 87 02 	lds	r13, 0x0287	; 0x800287 <lefterror+0x1>
     f56:	e0 90 88 02 	lds	r14, 0x0288	; 0x800288 <lefterror+0x2>
     f5a:	f0 90 89 02 	lds	r15, 0x0289	; 0x800289 <lefterror+0x3>
     f5e:	80 90 8a 02 	lds	r8, 0x028A	; 0x80028a <righterror>
     f62:	90 90 8b 02 	lds	r9, 0x028B	; 0x80028b <righterror+0x1>
     f66:	a0 90 8c 02 	lds	r10, 0x028C	; 0x80028c <righterror+0x2>
     f6a:	b0 90 8d 02 	lds	r11, 0x028D	; 0x80028d <righterror+0x3>
     f6e:	c7 01       	movw	r24, r14
     f70:	b6 01       	movw	r22, r12
     f72:	d2 d2       	rcall	.+1444   	; 0x1518 <__fixsfsi>
     f74:	eb 01       	movw	r28, r22
     f76:	dd 23       	and	r29, r29
     f78:	24 f4       	brge	.+8      	; 0xf82 <task+0x166>
     f7a:	cc 27       	eor	r28, r28
     f7c:	dd 27       	eor	r29, r29
     f7e:	c6 1b       	sub	r28, r22
     f80:	d7 0b       	sbc	r29, r23
     f82:	c5 01       	movw	r24, r10
     f84:	b4 01       	movw	r22, r8
     f86:	c8 d2       	rcall	.+1424   	; 0x1518 <__fixsfsi>
     f88:	9b 01       	movw	r18, r22
     f8a:	77 23       	and	r23, r23
     f8c:	24 f4       	brge	.+8      	; 0xf96 <task+0x17a>
     f8e:	22 27       	eor	r18, r18
     f90:	33 27       	eor	r19, r19
     f92:	26 1b       	sub	r18, r22
     f94:	37 0b       	sbc	r19, r23
     f96:	ce 01       	movw	r24, r28
     f98:	82 0f       	add	r24, r18
     f9a:	93 1f       	adc	r25, r19
     f9c:	03 97       	sbiw	r24, 0x03	; 3
     f9e:	0c f0       	brlt	.+2      	; 0xfa2 <task+0x186>
     fa0:	93 c0       	rjmp	.+294    	; 0x10c8 <task+0x2ac>
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	a9 01       	movw	r20, r18
     fa8:	c7 01       	movw	r24, r14
     faa:	b6 01       	movw	r22, r12
     fac:	b1 d2       	rcall	.+1378   	; 0x1510 <__cmpsf2>
     fae:	88 23       	and	r24, r24
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <task+0x198>
     fb2:	8a c0       	rjmp	.+276    	; 0x10c8 <task+0x2ac>
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	a9 01       	movw	r20, r18
     fba:	c5 01       	movw	r24, r10
     fbc:	b4 01       	movw	r22, r8
     fbe:	a8 d2       	rcall	.+1360   	; 0x1510 <__cmpsf2>
     fc0:	88 23       	and	r24, r24
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <task+0x1aa>
     fc4:	81 c0       	rjmp	.+258    	; 0x10c8 <task+0x2ac>
     fc6:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <lf_mode>
			{
				lf_mode++;
     fca:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <lf_mode+0x1>
     fce:	01 96       	adiw	r24, 0x01	; 1
     fd0:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <lf_mode+0x1>
     fd4:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <lf_mode>
     fd8:	77 c0       	rjmp	.+238    	; 0x10c8 <task+0x2ac>
     fda:	8c e3       	ldi	r24, 0x3C	; 60
			}
		break;
		case 7:
			lf_horizontal(60);
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	99 db       	rcall	.-2254   	; 0x712 <lf_horizontal>
     fe0:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <righthighcount>
			if (righthighcount>6)
     fe4:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <righthighcount+0x1>
     fe8:	07 97       	sbiw	r24, 0x07	; 7
     fea:	0c f4       	brge	.+2      	; 0xfee <task+0x1d2>
			{
				lf_mode++;
     fec:	6d c0       	rjmp	.+218    	; 0x10c8 <task+0x2ac>
     fee:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <lf_mode>
     ff2:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <lf_mode+0x1>
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <lf_mode+0x1>
				timer2_start();
     ffc:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <lf_mode>
    1000:	c2 d8       	rcall	.-3708   	; 0x186 <timer2_start>
			}
		break;
		case 8:
			lf_horizontal(-80);
    1002:	62 c0       	rjmp	.+196    	; 0x10c8 <task+0x2ac>
    1004:	80 eb       	ldi	r24, 0xB0	; 176
    1006:	9f ef       	ldi	r25, 0xFF	; 255
    1008:	84 db       	rcall	.-2296   	; 0x712 <lf_horizontal>
		break;
    100a:	5e c0       	rjmp	.+188    	; 0x10c8 <task+0x2ac>
		case 9:
			lf_horizontal(0);
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	80 db       	rcall	.-2304   	; 0x712 <lf_horizontal>
    1012:	5a c0       	rjmp	.+180    	; 0x10c8 <task+0x2ac>
		break;
    1014:	80 e5       	ldi	r24, 0x50	; 80
		case 10:
			lf_horizontal(80);
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	7c db       	rcall	.-2312   	; 0x712 <lf_horizontal>
    101a:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <righthighcount>
			if (righthighcount>6)
    101e:	90 91 95 02 	lds	r25, 0x0295	; 0x800295 <righthighcount+0x1>
    1022:	07 97       	sbiw	r24, 0x07	; 7
    1024:	0c f4       	brge	.+2      	; 0x1028 <task+0x20c>
    1026:	50 c0       	rjmp	.+160    	; 0x10c8 <task+0x2ac>
    1028:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <lf_mode>
			{
				lf_mode++;
    102c:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <lf_mode+0x1>
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <lf_mode+0x1>
    1036:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <lf_mode>
    103a:	46 c0       	rjmp	.+140    	; 0x10c8 <task+0x2ac>
			}
		break;
		case 11:
			lf_horizontal(40+voltage_val);
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e2       	ldi	r20, 0x20	; 32
    1042:	52 e4       	ldi	r21, 0x42	; 66
    1044:	60 91 5a 02 	lds	r22, 0x025A	; 0x80025a <__data_end>
    1048:	70 91 5b 02 	lds	r23, 0x025B	; 0x80025b <__data_end+0x1>
    104c:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end+0x2>
    1050:	90 91 5d 02 	lds	r25, 0x025D	; 0x80025d <__data_end+0x3>
    1054:	f9 d1       	rcall	.+1010   	; 0x1448 <__addsf3>
    1056:	60 d2       	rcall	.+1216   	; 0x1518 <__fixsfsi>
    1058:	cb 01       	movw	r24, r22
    105a:	5b db       	rcall	.-2378   	; 0x712 <lf_horizontal>
    105c:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <fronthighcount>
			if (fronthighcount && backhighcount)
    1060:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <fronthighcount+0x1>
    1064:	89 2b       	or	r24, r25
    1066:	81 f1       	breq	.+96     	; 0x10c8 <task+0x2ac>
    1068:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <backhighcount>
    106c:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <backhighcount+0x1>
    1070:	89 2b       	or	r24, r25
    1072:	51 f1       	breq	.+84     	; 0x10c8 <task+0x2ac>
    1074:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <lf_mode>
			{
				lf_mode++;
    1078:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <lf_mode+0x1>
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <lf_mode+0x1>
    1082:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <lf_mode>
    1086:	20 c0       	rjmp	.+64     	; 0x10c8 <task+0x2ac>
			}
		break;
		case 12:
			lf_nodealign();
    1088:	91 db       	rcall	.-2270   	; 0x7ac <lf_nodealign>
			PORTL=0x00;
    108a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
		break;
		case 13:
			lf_horizontal(yj1);
    108e:	1c c0       	rjmp	.+56     	; 0x10c8 <task+0x2ac>
    1090:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <yj1>
    1094:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <yj1+0x1>
    1098:	3c db       	rcall	.-2440   	; 0x712 <lf_horizontal>
			PORTL|=0x80;
    109a:	eb e0       	ldi	r30, 0x0B	; 11
    109c:	f1 e0       	ldi	r31, 0x01	; 1
    109e:	80 81       	ld	r24, Z
    10a0:	80 68       	ori	r24, 0x80	; 128
    10a2:	80 83       	st	Z, r24
		break;
    10a4:	11 c0       	rjmp	.+34     	; 0x10c8 <task+0x2ac>
		case 14:
			lf_horizontal(yj1);
    10a6:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <yj1>
    10aa:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <yj1+0x1>
    10ae:	31 db       	rcall	.-2462   	; 0x712 <lf_horizontal>
    10b0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
			PORTL=0x00;
    10b4:	09 c0       	rjmp	.+18     	; 0x10c8 <task+0x2ac>
		break;
    10b6:	80 91 1e 03 	lds	r24, 0x031E	; 0x80031e <yj1>
		case 15:
			lf_horizontal(yj1);
    10ba:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <yj1+0x1>
    10be:	29 db       	rcall	.-2478   	; 0x712 <lf_horizontal>
    10c0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
			PORTL=0x00;
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <task+0x2ac>
    10c6:	85 de       	rcall	.-758    	; 0xdd2 <errormove>
		break;
    10c8:	df 91       	pop	r29
		default:
			errormove();
    10ca:	cf 91       	pop	r28
    10cc:	ff 90       	pop	r15
	}
	#ifdef flag_indicator
	indicator_port1=lf_mode;
	#endif
}
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	bf 90       	pop	r11
    10d6:	af 90       	pop	r10
    10d8:	9f 90       	pop	r9
    10da:	8f 90       	pop	r8
    10dc:	08 95       	ret

000010de <receive>:
    10de:	4f 92       	push	r4
    10e0:	5f 92       	push	r5
    10e2:	6f 92       	push	r6
		}
	}
}

void receive()
{
    10e4:	7f 92       	push	r7
    10e6:	8f 92       	push	r8
    10e8:	9f 92       	push	r9
    10ea:	af 92       	push	r10
    10ec:	bf 92       	push	r11
    10ee:	cf 92       	push	r12
    10f0:	df 92       	push	r13
    10f2:	ef 92       	push	r14
    10f4:	ff 92       	push	r15
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	28 97       	sbiw	r28, 0x08	; 8
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	f8 94       	cli
    1104:	de bf       	out	0x3e, r29	; 62
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	cd bf       	out	0x3d, r28	; 61
	yj1=map_value(RX[0],0,RX_range,(-pwm_range),pwm_range);
    110a:	c0 90 40 02 	lds	r12, 0x0240	; 0x800240 <pwm_range>
    110e:	d0 90 41 02 	lds	r13, 0x0241	; 0x800241 <pwm_range+0x1>
    1112:	26 01       	movw	r4, r12
    1114:	0d 2c       	mov	r0, r13
    1116:	00 0c       	add	r0, r0
    1118:	66 08       	sbc	r6, r6
    111a:	77 08       	sbc	r7, r7
    111c:	d1 94       	neg	r13
    111e:	c1 94       	neg	r12
    1120:	d1 08       	sbc	r13, r1
    1122:	0d 2c       	mov	r0, r13
    1124:	00 0c       	add	r0, r0
    1126:	ee 08       	sbc	r14, r14
    1128:	ff 08       	sbc	r15, r15
    112a:	80 90 48 02 	lds	r8, 0x0248	; 0x800248 <RX_range>
    112e:	90 90 49 02 	lds	r9, 0x0249	; 0x800249 <RX_range+0x1>
    1132:	09 2c       	mov	r0, r9
    1134:	00 0c       	add	r0, r0
    1136:	aa 08       	sbc	r10, r10
    1138:	bb 08       	sbc	r11, r11
	drive_pwm3=sp_vect;
}

long map_value(long in_value, long in_min, long in_max, long out_min, long out_max)
{
	return (in_value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    113a:	d3 01       	movw	r26, r6
    113c:	c2 01       	movw	r24, r4
    113e:	8c 19       	sub	r24, r12
    1140:	9d 09       	sbc	r25, r13
    1142:	ae 09       	sbc	r26, r14
    1144:	bf 09       	sbc	r27, r15
    1146:	8d 83       	std	Y+5, r24	; 0x05
    1148:	9e 83       	std	Y+6, r25	; 0x06
    114a:	af 83       	std	Y+7, r26	; 0x07
    114c:	b8 87       	std	Y+8, r27	; 0x08
	}
}

void receive()
{
	yj1=map_value(RX[0],0,RX_range,(-pwm_range),pwm_range);
    114e:	ea e4       	ldi	r30, 0x4A	; 74
    1150:	f2 e0       	ldi	r31, 0x02	; 2
    1152:	a0 81       	ld	r26, Z
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	2d 81       	ldd	r18, Y+5	; 0x05
    1158:	3e 81       	ldd	r19, Y+6	; 0x06
    115a:	4f 81       	ldd	r20, Y+7	; 0x07
    115c:	58 85       	ldd	r21, Y+8	; 0x08
    115e:	59 d3       	rcall	.+1714   	; 0x1812 <__muluhisi3>
    1160:	a5 01       	movw	r20, r10
    1162:	94 01       	movw	r18, r8
    1164:	32 d3       	rcall	.+1636   	; 0x17ca <__divmodsi4>
    1166:	da 01       	movw	r26, r20
    1168:	c9 01       	movw	r24, r18
    116a:	8c 0d       	add	r24, r12
    116c:	9d 1d       	adc	r25, r13
    116e:	ae 1d       	adc	r26, r14
    1170:	bf 1d       	adc	r27, r15
    1172:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <yj1+0x1>
    1176:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <yj1>
	drive_pwm3=sp_vect;
}

long map_value(long in_value, long in_min, long in_max, long out_min, long out_max)
{
	return (in_value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    117a:	d7 01       	movw	r26, r14
    117c:	c6 01       	movw	r24, r12
    117e:	84 19       	sub	r24, r4
    1180:	95 09       	sbc	r25, r5
    1182:	a6 09       	sbc	r26, r6
    1184:	b7 09       	sbc	r27, r7
    1186:	89 83       	std	Y+1, r24	; 0x01
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	ab 83       	std	Y+3, r26	; 0x03
    118c:	bc 83       	std	Y+4, r27	; 0x04
}

void receive()
{
	yj1=map_value(RX[0],0,RX_range,(-pwm_range),pwm_range);
	xj1=map_value(RX[1],0,RX_range,pwm_range,(-pwm_range));
    118e:	a0 91 4b 02 	lds	r26, 0x024B	; 0x80024b <RX+0x1>
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	29 81       	ldd	r18, Y+1	; 0x01
    1196:	3a 81       	ldd	r19, Y+2	; 0x02
    1198:	4b 81       	ldd	r20, Y+3	; 0x03
    119a:	5c 81       	ldd	r21, Y+4	; 0x04
    119c:	3a d3       	rcall	.+1652   	; 0x1812 <__muluhisi3>
    119e:	a5 01       	movw	r20, r10
    11a0:	94 01       	movw	r18, r8
    11a2:	13 d3       	rcall	.+1574   	; 0x17ca <__divmodsi4>
    11a4:	da 01       	movw	r26, r20
    11a6:	c9 01       	movw	r24, r18
    11a8:	84 0d       	add	r24, r4
    11aa:	95 1d       	adc	r25, r5
    11ac:	a6 1d       	adc	r26, r6
    11ae:	b7 1d       	adc	r27, r7
    11b0:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <xj1+0x1>
    11b4:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <xj1>
	yj2=map_value(RX[2],0,RX_range,(-pwm_range),pwm_range);
    11b8:	a0 91 4c 02 	lds	r26, 0x024C	; 0x80024c <RX+0x2>
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	2d 81       	ldd	r18, Y+5	; 0x05
    11c0:	3e 81       	ldd	r19, Y+6	; 0x06
    11c2:	4f 81       	ldd	r20, Y+7	; 0x07
    11c4:	58 85       	ldd	r21, Y+8	; 0x08
    11c6:	25 d3       	rcall	.+1610   	; 0x1812 <__muluhisi3>
    11c8:	a5 01       	movw	r20, r10
    11ca:	94 01       	movw	r18, r8
    11cc:	fe d2       	rcall	.+1532   	; 0x17ca <__divmodsi4>
    11ce:	c2 0e       	add	r12, r18
    11d0:	d3 1e       	adc	r13, r19
    11d2:	e4 1e       	adc	r14, r20
    11d4:	f5 1e       	adc	r15, r21
    11d6:	d0 92 1b 03 	sts	0x031B, r13	; 0x80031b <yj2+0x1>
    11da:	c0 92 1a 03 	sts	0x031A, r12	; 0x80031a <yj2>
	xj2=map_value(RX[3],0,RX_range,pwm_range,(-pwm_range));
    11de:	a0 91 4d 02 	lds	r26, 0x024D	; 0x80024d <RX+0x3>
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	29 81       	ldd	r18, Y+1	; 0x01
    11e6:	3a 81       	ldd	r19, Y+2	; 0x02
    11e8:	4b 81       	ldd	r20, Y+3	; 0x03
    11ea:	5c 81       	ldd	r21, Y+4	; 0x04
    11ec:	12 d3       	rcall	.+1572   	; 0x1812 <__muluhisi3>
    11ee:	a5 01       	movw	r20, r10
    11f0:	94 01       	movw	r18, r8
    11f2:	eb d2       	rcall	.+1494   	; 0x17ca <__divmodsi4>
    11f4:	da 01       	movw	r26, r20
    11f6:	c9 01       	movw	r24, r18
    11f8:	84 0d       	add	r24, r4
    11fa:	95 1d       	adc	r25, r5
    11fc:	a6 1d       	adc	r26, r6
    11fe:	b7 1d       	adc	r27, r7
    1200:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <xj2+0x1>
    1204:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <xj2>
	#ifdef joystick_r_indicator
	indicator_port1=xj2;
	indicator_port2=yj2;
	#endif
	
	if (butt[PS_START]==1)
    1208:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <butt>
    120c:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <butt+0x1>
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	29 f4       	brne	.+10     	; 0x121e <receive+0x140>
	{
		calibrate();
    1214:	ea dc       	rcall	.-1580   	; 0xbea <calibrate>
    1216:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <butt+0x1>
		butt[PS_START]=0;
    121a:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <butt>
	}
	if (butt[PS_SELECT]==1)
    121e:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <butt+0x2>
    1222:	90 91 fd 02 	lds	r25, 0x02FD	; 0x8002fd <butt+0x3>
    1226:	01 97       	sbiw	r24, 0x01	; 1
	{
		writeeep();
    1228:	31 f4       	brne	.+12     	; 0x1236 <receive+0x158>
    122a:	29 d9       	rcall	.-3502   	; 0x47e <writeeep>
		resetmode();
    122c:	16 d8       	rcall	.-4052   	; 0x25a <resetmode>
    122e:	10 92 fd 02 	sts	0x02FD, r1	; 0x8002fd <butt+0x3>
		butt[PS_SELECT]=0;
    1232:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <butt+0x2>
    1236:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <butt+0x4>
	}
	if (butt[PS_UP]==1)
    123a:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <butt+0x5>
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f9 f4       	brne	.+62     	; 0x1280 <receive+0x1a2>
    1242:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <lf_mode>
	{
		lf_mode=limit_var(lf_mode+1,0,task_no);
    1246:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <lf_mode+0x1>
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	09 2e       	mov	r0, r25
    124e:	00 0c       	add	r0, r0
    1250:	aa 0b       	sbc	r26, r26
    1252:	bb 0b       	sbc	r27, r27
    1254:	bb 23       	and	r27, r27
    1256:	1c f4       	brge	.+6      	; 0x125e <receive+0x180>
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	dc 01       	movw	r26, r24
    125e:	80 31       	cpi	r24, 0x10	; 16
    1260:	91 05       	cpc	r25, r1
    1262:	a1 05       	cpc	r26, r1
    1264:	b1 05       	cpc	r27, r1
    1266:	24 f0       	brlt	.+8      	; 0x1270 <receive+0x192>
    1268:	8f e0       	ldi	r24, 0x0F	; 15
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	a0 e0       	ldi	r26, 0x00	; 0
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <lf_mode+0x1>
    1274:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <lf_mode>
    1278:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <butt+0x5>
		butt[PS_UP]=0;
    127c:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <butt+0x4>
    1280:	80 91 04 03 	lds	r24, 0x0304	; 0x800304 <butt+0xa>
	}
	if (butt[PS_DOWN]==1)
    1284:	90 91 05 03 	lds	r25, 0x0305	; 0x800305 <butt+0xb>
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	f9 f4       	brne	.+62     	; 0x12ca <receive+0x1ec>
    128c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <lf_mode>
	{
		lf_mode=limit_var(lf_mode-1,0,task_no);
    1290:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <lf_mode+0x1>
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	09 2e       	mov	r0, r25
    1298:	00 0c       	add	r0, r0
    129a:	aa 0b       	sbc	r26, r26
    129c:	bb 0b       	sbc	r27, r27
    129e:	bb 23       	and	r27, r27
    12a0:	1c f4       	brge	.+6      	; 0x12a8 <receive+0x1ca>
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	dc 01       	movw	r26, r24
    12a8:	80 31       	cpi	r24, 0x10	; 16
    12aa:	91 05       	cpc	r25, r1
    12ac:	a1 05       	cpc	r26, r1
    12ae:	b1 05       	cpc	r27, r1
    12b0:	24 f0       	brlt	.+8      	; 0x12ba <receive+0x1dc>
    12b2:	8f e0       	ldi	r24, 0x0F	; 15
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a0 e0       	ldi	r26, 0x00	; 0
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <lf_mode+0x1>
    12be:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <lf_mode>
    12c2:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <butt+0xb>
		butt[PS_DOWN]=0;
    12c6:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <butt+0xa>
    12ca:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <butt+0x8>
	}
	if (butt[PS_LEFT]==1)
    12ce:	90 91 03 03 	lds	r25, 0x0303	; 0x800303 <butt+0x9>
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	21 f4       	brne	.+8      	; 0x12de <receive+0x200>
    12d6:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <butt+0x9>
	{
		butt[PS_LEFT]=0;
    12da:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <butt+0x8>
    12de:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <butt+0x6>
	}
	if (butt[PS_RIGHT]==1)
    12e2:	90 91 01 03 	lds	r25, 0x0301	; 0x800301 <butt+0x7>
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	21 f4       	brne	.+8      	; 0x12f2 <receive+0x214>
    12ea:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <butt+0x7>
	{
		butt[PS_RIGHT]=0;
    12ee:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <butt+0x6>
    12f2:	80 91 16 03 	lds	r24, 0x0316	; 0x800316 <butt+0x1c>
	}
	if (butt[PS_SQUARE]==1)
    12f6:	90 91 17 03 	lds	r25, 0x0317	; 0x800317 <butt+0x1d>
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	21 f4       	brne	.+8      	; 0x1306 <receive+0x228>
    12fe:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <butt+0x1d>
	{
		butt[PS_SQUARE]=0;
    1302:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <butt+0x1c>
    1306:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <butt+0x1a>
	}
	if (butt[PS_CIRCLE]==1)
    130a:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <butt+0x1b>
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	21 f4       	brne	.+8      	; 0x131a <receive+0x23c>
    1312:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <butt+0x1b>
	{
		butt[PS_CIRCLE]=0;
    1316:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <butt+0x1a>
    131a:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <butt+0x18>
	}
	if (butt[PS_TRIANGLE]==1)
    131e:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <butt+0x19>
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	21 f4       	brne	.+8      	; 0x132e <receive+0x250>
    1326:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <butt+0x19>
	{
		butt[PS_TRIANGLE]=0;
    132a:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <butt+0x18>
    132e:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <butt+0x1e>
	}
	if (butt[PS_CROSS]==1)
    1332:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <butt+0x1f>
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	21 f4       	brne	.+8      	; 0x1342 <receive+0x264>
    133a:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <butt+0x1f>
	{
		butt[PS_CROSS]=0;
    133e:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <butt+0x1e>
    1342:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <butt+0x14>
	}
	if (butt[PS_L1]==1)
    1346:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <butt+0x15>
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	21 f4       	brne	.+8      	; 0x1356 <receive+0x278>
    134e:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <butt+0x15>
	{
		butt[PS_L1]=0;
    1352:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <butt+0x14>
    1356:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <butt+0x16>
	}
	if (butt[PS_R1]==1)
    135a:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <butt+0x17>
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	21 f4       	brne	.+8      	; 0x136a <receive+0x28c>
    1362:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <butt+0x17>
	{
		butt[PS_R1]=0;
    1366:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <butt+0x16>
    136a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <butt+0x10>
	}
	if (butt[PS_L2]==1)
    136e:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <butt+0x11>
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	21 f4       	brne	.+8      	; 0x137e <receive+0x2a0>
    1376:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <butt+0x11>
	{
		butt[PS_L2]=0;
    137a:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <butt+0x10>
    137e:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <butt+0x12>
	}
	if (butt[PS_R2]==1)
    1382:	90 91 0d 03 	lds	r25, 0x030D	; 0x80030d <butt+0x13>
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	41 f4       	brne	.+16     	; 0x139a <receive+0x2bc>
    138a:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <lf_mode+0x1>
	{
		lf_mode=0;
    138e:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <lf_mode>
    1392:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <butt+0x13>
		butt[PS_R2]=0;
    1396:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <butt+0x12>
    139a:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <butt+0xc>
	}
	if (butt[PS_L3]==1)
    139e:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <butt+0xd>
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	51 f4       	brne	.+20     	; 0x13ba <receive+0x2dc>
    13a6:	86 e0       	ldi	r24, 0x06	; 6
	{
		lf_mode=6;
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <lf_mode+0x1>
    13ae:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <lf_mode>
    13b2:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <butt+0xd>
		butt[PS_L3]=0;
    13b6:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <butt+0xc>
	}
	if (butt[PS_R3]==1)
    13ba:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <butt+0xe>
    13be:	90 91 09 03 	lds	r25, 0x0309	; 0x800309 <butt+0xf>
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	29 f4       	brne	.+10     	; 0x13d0 <receive+0x2f2>
	{
		errormove();												//DEBUG;
    13c6:	05 dd       	rcall	.-1526   	; 0xdd2 <errormove>
    13c8:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <butt+0xf>
		butt[PS_R3]=0;
    13cc:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <butt+0xe>
    13d0:	28 96       	adiw	r28, 0x08	; 8
	}
}
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	df 90       	pop	r13
    13e6:	cf 90       	pop	r12
    13e8:	bf 90       	pop	r11
    13ea:	af 90       	pop	r10
    13ec:	9f 90       	pop	r9
    13ee:	8f 90       	pop	r8
    13f0:	7f 90       	pop	r7
    13f2:	6f 90       	pop	r6
    13f4:	5f 90       	pop	r5
    13f6:	4f 90       	pop	r4
    13f8:	08 95       	ret

000013fa <main>:
    13fa:	11 b8       	out	0x01, r1	; 1


int main(void)
{
	DDRA=0x00;									//receive sensfront from drive2;
	DDRB=0xFF;									//drive direction;
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	84 b9       	out	0x04, r24	; 4
	DDRC=0x00;									//receive sensback from drive2;
    1400:	17 b8       	out	0x07, r1	; 7
	DDRD=0xFF;									//indicator_port1;
    1402:	8a b9       	out	0x0a, r24	; 10
	DDRE=0xFF;									//drive pwm port;
    1404:	8d b9       	out	0x0d, r24	; 13
	PORTE=0xFF;
    1406:	8e b9       	out	0x0e, r24	; 14
	DDRH=0xFF;									//indicator_port2;
    1408:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	DDRJ=0xFF;									//serial 3, bluetooth;
    140c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	DDRL=0xF0;									//receive flags from drive2;
    1410:	80 ef       	ldi	r24, 0xF0	; 240
    1412:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
	PORTL|=0x0F;								//and transmit triggers to drive2;
    1416:	eb e0       	ldi	r30, 0x0B	; 11
    1418:	f1 e0       	ldi	r31, 0x01	; 1
    141a:	80 81       	ld	r24, Z
    141c:	8f 60       	ori	r24, 0x0F	; 15
    141e:	80 83       	st	Z, r24
	DDRF=0x00;									//right array;
    1420:	10 ba       	out	0x10, r1	; 16
	DDRK=0x00;									//left array;
    1422:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
	DDRG=0x00;									//voltageread;
    1426:	13 ba       	out	0x13, r1	; 19
	
	sei();
    1428:	78 94       	sei
	ADC_initiate();
    142a:	61 da       	rcall	.-2878   	; 0x8ee <ADC_initiate>
	serialstart_3();
    142c:	70 dc       	rcall	.-1824   	; 0xd0e <serialstart_3>
	pwm_init();
    142e:	54 da       	rcall	.-2904   	; 0x8d8 <pwm_init>
    1430:	3e d8       	rcall	.-3972   	; 0x4ae <readeep>
	
	readeep();
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	50 e0       	ldi	r21, 0x00	; 0
	
	drive_3W(0,0,0);
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	f8 d8       	rcall	.-3600   	; 0x630 <drive_3W>
	
    while (1)
    {
		receive();
    1440:	4e de       	rcall	.-868    	; 0x10de <receive>
    1442:	ec dc       	rcall	.-1576   	; 0xe1c <task>
		task();
    1444:	fd cf       	rjmp	.-6      	; 0x1440 <main+0x46>

00001446 <__subsf3>:
    1446:	50 58       	subi	r21, 0x80	; 128

00001448 <__addsf3>:
    1448:	bb 27       	eor	r27, r27
    144a:	aa 27       	eor	r26, r26
    144c:	0e d0       	rcall	.+28     	; 0x146a <__addsf3x>
    144e:	0d c1       	rjmp	.+538    	; 0x166a <__fp_round>
    1450:	fe d0       	rcall	.+508    	; 0x164e <__fp_pscA>
    1452:	30 f0       	brcs	.+12     	; 0x1460 <__addsf3+0x18>
    1454:	03 d1       	rcall	.+518    	; 0x165c <__fp_pscB>
    1456:	20 f0       	brcs	.+8      	; 0x1460 <__addsf3+0x18>
    1458:	31 f4       	brne	.+12     	; 0x1466 <__addsf3+0x1e>
    145a:	9f 3f       	cpi	r25, 0xFF	; 255
    145c:	11 f4       	brne	.+4      	; 0x1462 <__addsf3+0x1a>
    145e:	1e f4       	brtc	.+6      	; 0x1466 <__addsf3+0x1e>
    1460:	f3 c0       	rjmp	.+486    	; 0x1648 <__fp_nan>
    1462:	0e f4       	brtc	.+2      	; 0x1466 <__addsf3+0x1e>
    1464:	e0 95       	com	r30
    1466:	e7 fb       	bst	r30, 7
    1468:	e9 c0       	rjmp	.+466    	; 0x163c <__fp_inf>

0000146a <__addsf3x>:
    146a:	e9 2f       	mov	r30, r25
    146c:	0f d1       	rcall	.+542    	; 0x168c <__fp_split3>
    146e:	80 f3       	brcs	.-32     	; 0x1450 <__addsf3+0x8>
    1470:	ba 17       	cp	r27, r26
    1472:	62 07       	cpc	r22, r18
    1474:	73 07       	cpc	r23, r19
    1476:	84 07       	cpc	r24, r20
    1478:	95 07       	cpc	r25, r21
    147a:	18 f0       	brcs	.+6      	; 0x1482 <__addsf3x+0x18>
    147c:	71 f4       	brne	.+28     	; 0x149a <__addsf3x+0x30>
    147e:	9e f5       	brtc	.+102    	; 0x14e6 <__addsf3x+0x7c>
    1480:	27 c1       	rjmp	.+590    	; 0x16d0 <__fp_zero>
    1482:	0e f4       	brtc	.+2      	; 0x1486 <__addsf3x+0x1c>
    1484:	e0 95       	com	r30
    1486:	0b 2e       	mov	r0, r27
    1488:	ba 2f       	mov	r27, r26
    148a:	a0 2d       	mov	r26, r0
    148c:	0b 01       	movw	r0, r22
    148e:	b9 01       	movw	r22, r18
    1490:	90 01       	movw	r18, r0
    1492:	0c 01       	movw	r0, r24
    1494:	ca 01       	movw	r24, r20
    1496:	a0 01       	movw	r20, r0
    1498:	11 24       	eor	r1, r1
    149a:	ff 27       	eor	r31, r31
    149c:	59 1b       	sub	r21, r25
    149e:	99 f0       	breq	.+38     	; 0x14c6 <__addsf3x+0x5c>
    14a0:	59 3f       	cpi	r21, 0xF9	; 249
    14a2:	50 f4       	brcc	.+20     	; 0x14b8 <__addsf3x+0x4e>
    14a4:	50 3e       	cpi	r21, 0xE0	; 224
    14a6:	68 f1       	brcs	.+90     	; 0x1502 <__addsf3x+0x98>
    14a8:	1a 16       	cp	r1, r26
    14aa:	f0 40       	sbci	r31, 0x00	; 0
    14ac:	a2 2f       	mov	r26, r18
    14ae:	23 2f       	mov	r18, r19
    14b0:	34 2f       	mov	r19, r20
    14b2:	44 27       	eor	r20, r20
    14b4:	58 5f       	subi	r21, 0xF8	; 248
    14b6:	f3 cf       	rjmp	.-26     	; 0x149e <__addsf3x+0x34>
    14b8:	46 95       	lsr	r20
    14ba:	37 95       	ror	r19
    14bc:	27 95       	ror	r18
    14be:	a7 95       	ror	r26
    14c0:	f0 40       	sbci	r31, 0x00	; 0
    14c2:	53 95       	inc	r21
    14c4:	c9 f7       	brne	.-14     	; 0x14b8 <__addsf3x+0x4e>
    14c6:	7e f4       	brtc	.+30     	; 0x14e6 <__addsf3x+0x7c>
    14c8:	1f 16       	cp	r1, r31
    14ca:	ba 0b       	sbc	r27, r26
    14cc:	62 0b       	sbc	r22, r18
    14ce:	73 0b       	sbc	r23, r19
    14d0:	84 0b       	sbc	r24, r20
    14d2:	ba f0       	brmi	.+46     	; 0x1502 <__addsf3x+0x98>
    14d4:	91 50       	subi	r25, 0x01	; 1
    14d6:	a1 f0       	breq	.+40     	; 0x1500 <__addsf3x+0x96>
    14d8:	ff 0f       	add	r31, r31
    14da:	bb 1f       	adc	r27, r27
    14dc:	66 1f       	adc	r22, r22
    14de:	77 1f       	adc	r23, r23
    14e0:	88 1f       	adc	r24, r24
    14e2:	c2 f7       	brpl	.-16     	; 0x14d4 <__addsf3x+0x6a>
    14e4:	0e c0       	rjmp	.+28     	; 0x1502 <__addsf3x+0x98>
    14e6:	ba 0f       	add	r27, r26
    14e8:	62 1f       	adc	r22, r18
    14ea:	73 1f       	adc	r23, r19
    14ec:	84 1f       	adc	r24, r20
    14ee:	48 f4       	brcc	.+18     	; 0x1502 <__addsf3x+0x98>
    14f0:	87 95       	ror	r24
    14f2:	77 95       	ror	r23
    14f4:	67 95       	ror	r22
    14f6:	b7 95       	ror	r27
    14f8:	f7 95       	ror	r31
    14fa:	9e 3f       	cpi	r25, 0xFE	; 254
    14fc:	08 f0       	brcs	.+2      	; 0x1500 <__addsf3x+0x96>
    14fe:	b3 cf       	rjmp	.-154    	; 0x1466 <__addsf3+0x1e>
    1500:	93 95       	inc	r25
    1502:	88 0f       	add	r24, r24
    1504:	08 f0       	brcs	.+2      	; 0x1508 <__addsf3x+0x9e>
    1506:	99 27       	eor	r25, r25
    1508:	ee 0f       	add	r30, r30
    150a:	97 95       	ror	r25
    150c:	87 95       	ror	r24
    150e:	08 95       	ret

00001510 <__cmpsf2>:
    1510:	71 d0       	rcall	.+226    	; 0x15f4 <__fp_cmp>
    1512:	08 f4       	brcc	.+2      	; 0x1516 <__cmpsf2+0x6>
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	08 95       	ret

00001518 <__fixsfsi>:
    1518:	04 d0       	rcall	.+8      	; 0x1522 <__fixunssfsi>
    151a:	68 94       	set
    151c:	b1 11       	cpse	r27, r1
    151e:	d9 c0       	rjmp	.+434    	; 0x16d2 <__fp_szero>
    1520:	08 95       	ret

00001522 <__fixunssfsi>:
    1522:	bc d0       	rcall	.+376    	; 0x169c <__fp_splitA>
    1524:	88 f0       	brcs	.+34     	; 0x1548 <__fixunssfsi+0x26>
    1526:	9f 57       	subi	r25, 0x7F	; 127
    1528:	90 f0       	brcs	.+36     	; 0x154e <__fixunssfsi+0x2c>
    152a:	b9 2f       	mov	r27, r25
    152c:	99 27       	eor	r25, r25
    152e:	b7 51       	subi	r27, 0x17	; 23
    1530:	a0 f0       	brcs	.+40     	; 0x155a <__fixunssfsi+0x38>
    1532:	d1 f0       	breq	.+52     	; 0x1568 <__fixunssfsi+0x46>
    1534:	66 0f       	add	r22, r22
    1536:	77 1f       	adc	r23, r23
    1538:	88 1f       	adc	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	1a f0       	brmi	.+6      	; 0x1544 <__fixunssfsi+0x22>
    153e:	ba 95       	dec	r27
    1540:	c9 f7       	brne	.-14     	; 0x1534 <__fixunssfsi+0x12>
    1542:	12 c0       	rjmp	.+36     	; 0x1568 <__fixunssfsi+0x46>
    1544:	b1 30       	cpi	r27, 0x01	; 1
    1546:	81 f0       	breq	.+32     	; 0x1568 <__fixunssfsi+0x46>
    1548:	c3 d0       	rcall	.+390    	; 0x16d0 <__fp_zero>
    154a:	b1 e0       	ldi	r27, 0x01	; 1
    154c:	08 95       	ret
    154e:	c0 c0       	rjmp	.+384    	; 0x16d0 <__fp_zero>
    1550:	67 2f       	mov	r22, r23
    1552:	78 2f       	mov	r23, r24
    1554:	88 27       	eor	r24, r24
    1556:	b8 5f       	subi	r27, 0xF8	; 248
    1558:	39 f0       	breq	.+14     	; 0x1568 <__fixunssfsi+0x46>
    155a:	b9 3f       	cpi	r27, 0xF9	; 249
    155c:	cc f3       	brlt	.-14     	; 0x1550 <__fixunssfsi+0x2e>
    155e:	86 95       	lsr	r24
    1560:	77 95       	ror	r23
    1562:	67 95       	ror	r22
    1564:	b3 95       	inc	r27
    1566:	d9 f7       	brne	.-10     	; 0x155e <__fixunssfsi+0x3c>
    1568:	3e f4       	brtc	.+14     	; 0x1578 <__fixunssfsi+0x56>
    156a:	90 95       	com	r25
    156c:	80 95       	com	r24
    156e:	70 95       	com	r23
    1570:	61 95       	neg	r22
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	8f 4f       	sbci	r24, 0xFF	; 255
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	08 95       	ret

0000157a <__floatunsisf>:
    157a:	e8 94       	clt
    157c:	09 c0       	rjmp	.+18     	; 0x1590 <__floatsisf+0x12>

0000157e <__floatsisf>:
    157e:	97 fb       	bst	r25, 7
    1580:	3e f4       	brtc	.+14     	; 0x1590 <__floatsisf+0x12>
    1582:	90 95       	com	r25
    1584:	80 95       	com	r24
    1586:	70 95       	com	r23
    1588:	61 95       	neg	r22
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	8f 4f       	sbci	r24, 0xFF	; 255
    158e:	9f 4f       	sbci	r25, 0xFF	; 255
    1590:	99 23       	and	r25, r25
    1592:	a9 f0       	breq	.+42     	; 0x15be <__floatsisf+0x40>
    1594:	f9 2f       	mov	r31, r25
    1596:	96 e9       	ldi	r25, 0x96	; 150
    1598:	bb 27       	eor	r27, r27
    159a:	93 95       	inc	r25
    159c:	f6 95       	lsr	r31
    159e:	87 95       	ror	r24
    15a0:	77 95       	ror	r23
    15a2:	67 95       	ror	r22
    15a4:	b7 95       	ror	r27
    15a6:	f1 11       	cpse	r31, r1
    15a8:	f8 cf       	rjmp	.-16     	; 0x159a <__floatsisf+0x1c>
    15aa:	fa f4       	brpl	.+62     	; 0x15ea <__floatsisf+0x6c>
    15ac:	bb 0f       	add	r27, r27
    15ae:	11 f4       	brne	.+4      	; 0x15b4 <__floatsisf+0x36>
    15b0:	60 ff       	sbrs	r22, 0
    15b2:	1b c0       	rjmp	.+54     	; 0x15ea <__floatsisf+0x6c>
    15b4:	6f 5f       	subi	r22, 0xFF	; 255
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
    15b8:	8f 4f       	sbci	r24, 0xFF	; 255
    15ba:	9f 4f       	sbci	r25, 0xFF	; 255
    15bc:	16 c0       	rjmp	.+44     	; 0x15ea <__floatsisf+0x6c>
    15be:	88 23       	and	r24, r24
    15c0:	11 f0       	breq	.+4      	; 0x15c6 <__floatsisf+0x48>
    15c2:	96 e9       	ldi	r25, 0x96	; 150
    15c4:	11 c0       	rjmp	.+34     	; 0x15e8 <__floatsisf+0x6a>
    15c6:	77 23       	and	r23, r23
    15c8:	21 f0       	breq	.+8      	; 0x15d2 <__floatsisf+0x54>
    15ca:	9e e8       	ldi	r25, 0x8E	; 142
    15cc:	87 2f       	mov	r24, r23
    15ce:	76 2f       	mov	r23, r22
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <__floatsisf+0x5e>
    15d2:	66 23       	and	r22, r22
    15d4:	71 f0       	breq	.+28     	; 0x15f2 <__floatsisf+0x74>
    15d6:	96 e8       	ldi	r25, 0x86	; 134
    15d8:	86 2f       	mov	r24, r22
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	2a f0       	brmi	.+10     	; 0x15ea <__floatsisf+0x6c>
    15e0:	9a 95       	dec	r25
    15e2:	66 0f       	add	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	88 1f       	adc	r24, r24
    15e8:	da f7       	brpl	.-10     	; 0x15e0 <__floatsisf+0x62>
    15ea:	88 0f       	add	r24, r24
    15ec:	96 95       	lsr	r25
    15ee:	87 95       	ror	r24
    15f0:	97 f9       	bld	r25, 7
    15f2:	08 95       	ret

000015f4 <__fp_cmp>:
    15f4:	99 0f       	add	r25, r25
    15f6:	00 08       	sbc	r0, r0
    15f8:	55 0f       	add	r21, r21
    15fa:	aa 0b       	sbc	r26, r26
    15fc:	e0 e8       	ldi	r30, 0x80	; 128
    15fe:	fe ef       	ldi	r31, 0xFE	; 254
    1600:	16 16       	cp	r1, r22
    1602:	17 06       	cpc	r1, r23
    1604:	e8 07       	cpc	r30, r24
    1606:	f9 07       	cpc	r31, r25
    1608:	c0 f0       	brcs	.+48     	; 0x163a <__fp_cmp+0x46>
    160a:	12 16       	cp	r1, r18
    160c:	13 06       	cpc	r1, r19
    160e:	e4 07       	cpc	r30, r20
    1610:	f5 07       	cpc	r31, r21
    1612:	98 f0       	brcs	.+38     	; 0x163a <__fp_cmp+0x46>
    1614:	62 1b       	sub	r22, r18
    1616:	73 0b       	sbc	r23, r19
    1618:	84 0b       	sbc	r24, r20
    161a:	95 0b       	sbc	r25, r21
    161c:	39 f4       	brne	.+14     	; 0x162c <__fp_cmp+0x38>
    161e:	0a 26       	eor	r0, r26
    1620:	61 f0       	breq	.+24     	; 0x163a <__fp_cmp+0x46>
    1622:	23 2b       	or	r18, r19
    1624:	24 2b       	or	r18, r20
    1626:	25 2b       	or	r18, r21
    1628:	21 f4       	brne	.+8      	; 0x1632 <__fp_cmp+0x3e>
    162a:	08 95       	ret
    162c:	0a 26       	eor	r0, r26
    162e:	09 f4       	brne	.+2      	; 0x1632 <__fp_cmp+0x3e>
    1630:	a1 40       	sbci	r26, 0x01	; 1
    1632:	a6 95       	lsr	r26
    1634:	8f ef       	ldi	r24, 0xFF	; 255
    1636:	81 1d       	adc	r24, r1
    1638:	81 1d       	adc	r24, r1
    163a:	08 95       	ret

0000163c <__fp_inf>:
    163c:	97 f9       	bld	r25, 7
    163e:	9f 67       	ori	r25, 0x7F	; 127
    1640:	80 e8       	ldi	r24, 0x80	; 128
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	60 e0       	ldi	r22, 0x00	; 0
    1646:	08 95       	ret

00001648 <__fp_nan>:
    1648:	9f ef       	ldi	r25, 0xFF	; 255
    164a:	80 ec       	ldi	r24, 0xC0	; 192
    164c:	08 95       	ret

0000164e <__fp_pscA>:
    164e:	00 24       	eor	r0, r0
    1650:	0a 94       	dec	r0
    1652:	16 16       	cp	r1, r22
    1654:	17 06       	cpc	r1, r23
    1656:	18 06       	cpc	r1, r24
    1658:	09 06       	cpc	r0, r25
    165a:	08 95       	ret

0000165c <__fp_pscB>:
    165c:	00 24       	eor	r0, r0
    165e:	0a 94       	dec	r0
    1660:	12 16       	cp	r1, r18
    1662:	13 06       	cpc	r1, r19
    1664:	14 06       	cpc	r1, r20
    1666:	05 06       	cpc	r0, r21
    1668:	08 95       	ret

0000166a <__fp_round>:
    166a:	09 2e       	mov	r0, r25
    166c:	03 94       	inc	r0
    166e:	00 0c       	add	r0, r0
    1670:	11 f4       	brne	.+4      	; 0x1676 <__fp_round+0xc>
    1672:	88 23       	and	r24, r24
    1674:	52 f0       	brmi	.+20     	; 0x168a <__fp_round+0x20>
    1676:	bb 0f       	add	r27, r27
    1678:	40 f4       	brcc	.+16     	; 0x168a <__fp_round+0x20>
    167a:	bf 2b       	or	r27, r31
    167c:	11 f4       	brne	.+4      	; 0x1682 <__fp_round+0x18>
    167e:	60 ff       	sbrs	r22, 0
    1680:	04 c0       	rjmp	.+8      	; 0x168a <__fp_round+0x20>
    1682:	6f 5f       	subi	r22, 0xFF	; 255
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	8f 4f       	sbci	r24, 0xFF	; 255
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	08 95       	ret

0000168c <__fp_split3>:
    168c:	57 fd       	sbrc	r21, 7
    168e:	90 58       	subi	r25, 0x80	; 128
    1690:	44 0f       	add	r20, r20
    1692:	55 1f       	adc	r21, r21
    1694:	59 f0       	breq	.+22     	; 0x16ac <__fp_splitA+0x10>
    1696:	5f 3f       	cpi	r21, 0xFF	; 255
    1698:	71 f0       	breq	.+28     	; 0x16b6 <__fp_splitA+0x1a>
    169a:	47 95       	ror	r20

0000169c <__fp_splitA>:
    169c:	88 0f       	add	r24, r24
    169e:	97 fb       	bst	r25, 7
    16a0:	99 1f       	adc	r25, r25
    16a2:	61 f0       	breq	.+24     	; 0x16bc <__fp_splitA+0x20>
    16a4:	9f 3f       	cpi	r25, 0xFF	; 255
    16a6:	79 f0       	breq	.+30     	; 0x16c6 <__fp_splitA+0x2a>
    16a8:	87 95       	ror	r24
    16aa:	08 95       	ret
    16ac:	12 16       	cp	r1, r18
    16ae:	13 06       	cpc	r1, r19
    16b0:	14 06       	cpc	r1, r20
    16b2:	55 1f       	adc	r21, r21
    16b4:	f2 cf       	rjmp	.-28     	; 0x169a <__fp_split3+0xe>
    16b6:	46 95       	lsr	r20
    16b8:	f1 df       	rcall	.-30     	; 0x169c <__fp_splitA>
    16ba:	08 c0       	rjmp	.+16     	; 0x16cc <__fp_splitA+0x30>
    16bc:	16 16       	cp	r1, r22
    16be:	17 06       	cpc	r1, r23
    16c0:	18 06       	cpc	r1, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	f1 cf       	rjmp	.-30     	; 0x16a8 <__fp_splitA+0xc>
    16c6:	86 95       	lsr	r24
    16c8:	71 05       	cpc	r23, r1
    16ca:	61 05       	cpc	r22, r1
    16cc:	08 94       	sec
    16ce:	08 95       	ret

000016d0 <__fp_zero>:
    16d0:	e8 94       	clt

000016d2 <__fp_szero>:
    16d2:	bb 27       	eor	r27, r27
    16d4:	66 27       	eor	r22, r22
    16d6:	77 27       	eor	r23, r23
    16d8:	cb 01       	movw	r24, r22
    16da:	97 f9       	bld	r25, 7
    16dc:	08 95       	ret

000016de <__mulsf3>:
    16de:	0b d0       	rcall	.+22     	; 0x16f6 <__mulsf3x>
    16e0:	c4 cf       	rjmp	.-120    	; 0x166a <__fp_round>
    16e2:	b5 df       	rcall	.-150    	; 0x164e <__fp_pscA>
    16e4:	28 f0       	brcs	.+10     	; 0x16f0 <__mulsf3+0x12>
    16e6:	ba df       	rcall	.-140    	; 0x165c <__fp_pscB>
    16e8:	18 f0       	brcs	.+6      	; 0x16f0 <__mulsf3+0x12>
    16ea:	95 23       	and	r25, r21
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <__mulsf3+0x12>
    16ee:	a6 cf       	rjmp	.-180    	; 0x163c <__fp_inf>
    16f0:	ab cf       	rjmp	.-170    	; 0x1648 <__fp_nan>
    16f2:	11 24       	eor	r1, r1
    16f4:	ee cf       	rjmp	.-36     	; 0x16d2 <__fp_szero>

000016f6 <__mulsf3x>:
    16f6:	ca df       	rcall	.-108    	; 0x168c <__fp_split3>
    16f8:	a0 f3       	brcs	.-24     	; 0x16e2 <__mulsf3+0x4>

000016fa <__mulsf3_pse>:
    16fa:	95 9f       	mul	r25, r21
    16fc:	d1 f3       	breq	.-12     	; 0x16f2 <__mulsf3+0x14>
    16fe:	95 0f       	add	r25, r21
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	55 1f       	adc	r21, r21
    1704:	62 9f       	mul	r22, r18
    1706:	f0 01       	movw	r30, r0
    1708:	72 9f       	mul	r23, r18
    170a:	bb 27       	eor	r27, r27
    170c:	f0 0d       	add	r31, r0
    170e:	b1 1d       	adc	r27, r1
    1710:	63 9f       	mul	r22, r19
    1712:	aa 27       	eor	r26, r26
    1714:	f0 0d       	add	r31, r0
    1716:	b1 1d       	adc	r27, r1
    1718:	aa 1f       	adc	r26, r26
    171a:	64 9f       	mul	r22, r20
    171c:	66 27       	eor	r22, r22
    171e:	b0 0d       	add	r27, r0
    1720:	a1 1d       	adc	r26, r1
    1722:	66 1f       	adc	r22, r22
    1724:	82 9f       	mul	r24, r18
    1726:	22 27       	eor	r18, r18
    1728:	b0 0d       	add	r27, r0
    172a:	a1 1d       	adc	r26, r1
    172c:	62 1f       	adc	r22, r18
    172e:	73 9f       	mul	r23, r19
    1730:	b0 0d       	add	r27, r0
    1732:	a1 1d       	adc	r26, r1
    1734:	62 1f       	adc	r22, r18
    1736:	83 9f       	mul	r24, r19
    1738:	a0 0d       	add	r26, r0
    173a:	61 1d       	adc	r22, r1
    173c:	22 1f       	adc	r18, r18
    173e:	74 9f       	mul	r23, r20
    1740:	33 27       	eor	r19, r19
    1742:	a0 0d       	add	r26, r0
    1744:	61 1d       	adc	r22, r1
    1746:	23 1f       	adc	r18, r19
    1748:	84 9f       	mul	r24, r20
    174a:	60 0d       	add	r22, r0
    174c:	21 1d       	adc	r18, r1
    174e:	82 2f       	mov	r24, r18
    1750:	76 2f       	mov	r23, r22
    1752:	6a 2f       	mov	r22, r26
    1754:	11 24       	eor	r1, r1
    1756:	9f 57       	subi	r25, 0x7F	; 127
    1758:	50 40       	sbci	r21, 0x00	; 0
    175a:	8a f0       	brmi	.+34     	; 0x177e <__mulsf3_pse+0x84>
    175c:	e1 f0       	breq	.+56     	; 0x1796 <__mulsf3_pse+0x9c>
    175e:	88 23       	and	r24, r24
    1760:	4a f0       	brmi	.+18     	; 0x1774 <__mulsf3_pse+0x7a>
    1762:	ee 0f       	add	r30, r30
    1764:	ff 1f       	adc	r31, r31
    1766:	bb 1f       	adc	r27, r27
    1768:	66 1f       	adc	r22, r22
    176a:	77 1f       	adc	r23, r23
    176c:	88 1f       	adc	r24, r24
    176e:	91 50       	subi	r25, 0x01	; 1
    1770:	50 40       	sbci	r21, 0x00	; 0
    1772:	a9 f7       	brne	.-22     	; 0x175e <__mulsf3_pse+0x64>
    1774:	9e 3f       	cpi	r25, 0xFE	; 254
    1776:	51 05       	cpc	r21, r1
    1778:	70 f0       	brcs	.+28     	; 0x1796 <__mulsf3_pse+0x9c>
    177a:	60 cf       	rjmp	.-320    	; 0x163c <__fp_inf>
    177c:	aa cf       	rjmp	.-172    	; 0x16d2 <__fp_szero>
    177e:	5f 3f       	cpi	r21, 0xFF	; 255
    1780:	ec f3       	brlt	.-6      	; 0x177c <__mulsf3_pse+0x82>
    1782:	98 3e       	cpi	r25, 0xE8	; 232
    1784:	dc f3       	brlt	.-10     	; 0x177c <__mulsf3_pse+0x82>
    1786:	86 95       	lsr	r24
    1788:	77 95       	ror	r23
    178a:	67 95       	ror	r22
    178c:	b7 95       	ror	r27
    178e:	f7 95       	ror	r31
    1790:	e7 95       	ror	r30
    1792:	9f 5f       	subi	r25, 0xFF	; 255
    1794:	c1 f7       	brne	.-16     	; 0x1786 <__mulsf3_pse+0x8c>
    1796:	fe 2b       	or	r31, r30
    1798:	88 0f       	add	r24, r24
    179a:	91 1d       	adc	r25, r1
    179c:	96 95       	lsr	r25
    179e:	87 95       	ror	r24
    17a0:	97 f9       	bld	r25, 7
    17a2:	08 95       	ret

000017a4 <__divmodhi4>:
    17a4:	97 fb       	bst	r25, 7
    17a6:	07 2e       	mov	r0, r23
    17a8:	16 f4       	brtc	.+4      	; 0x17ae <__divmodhi4+0xa>
    17aa:	00 94       	com	r0
    17ac:	06 d0       	rcall	.+12     	; 0x17ba <__divmodhi4_neg1>
    17ae:	77 fd       	sbrc	r23, 7
    17b0:	08 d0       	rcall	.+16     	; 0x17c2 <__divmodhi4_neg2>
    17b2:	39 d0       	rcall	.+114    	; 0x1826 <__udivmodhi4>
    17b4:	07 fc       	sbrc	r0, 7
    17b6:	05 d0       	rcall	.+10     	; 0x17c2 <__divmodhi4_neg2>
    17b8:	3e f4       	brtc	.+14     	; 0x17c8 <__divmodhi4_exit>

000017ba <__divmodhi4_neg1>:
    17ba:	90 95       	com	r25
    17bc:	81 95       	neg	r24
    17be:	9f 4f       	sbci	r25, 0xFF	; 255
    17c0:	08 95       	ret

000017c2 <__divmodhi4_neg2>:
    17c2:	70 95       	com	r23
    17c4:	61 95       	neg	r22
    17c6:	7f 4f       	sbci	r23, 0xFF	; 255

000017c8 <__divmodhi4_exit>:
    17c8:	08 95       	ret

000017ca <__divmodsi4>:
    17ca:	05 2e       	mov	r0, r21
    17cc:	97 fb       	bst	r25, 7
    17ce:	16 f4       	brtc	.+4      	; 0x17d4 <__divmodsi4+0xa>
    17d0:	00 94       	com	r0
    17d2:	0f d0       	rcall	.+30     	; 0x17f2 <__negsi2>
    17d4:	57 fd       	sbrc	r21, 7
    17d6:	05 d0       	rcall	.+10     	; 0x17e2 <__divmodsi4_neg2>
    17d8:	3a d0       	rcall	.+116    	; 0x184e <__udivmodsi4>
    17da:	07 fc       	sbrc	r0, 7
    17dc:	02 d0       	rcall	.+4      	; 0x17e2 <__divmodsi4_neg2>
    17de:	46 f4       	brtc	.+16     	; 0x17f0 <__divmodsi4_exit>
    17e0:	08 c0       	rjmp	.+16     	; 0x17f2 <__negsi2>

000017e2 <__divmodsi4_neg2>:
    17e2:	50 95       	com	r21
    17e4:	40 95       	com	r20
    17e6:	30 95       	com	r19
    17e8:	21 95       	neg	r18
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	4f 4f       	sbci	r20, 0xFF	; 255
    17ee:	5f 4f       	sbci	r21, 0xFF	; 255

000017f0 <__divmodsi4_exit>:
    17f0:	08 95       	ret

000017f2 <__negsi2>:
    17f2:	90 95       	com	r25
    17f4:	80 95       	com	r24
    17f6:	70 95       	com	r23
    17f8:	61 95       	neg	r22
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	8f 4f       	sbci	r24, 0xFF	; 255
    17fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1800:	08 95       	ret

00001802 <__tablejump2__>:
    1802:	ee 0f       	add	r30, r30
    1804:	ff 1f       	adc	r31, r31
    1806:	88 1f       	adc	r24, r24
    1808:	8b bf       	out	0x3b, r24	; 59
    180a:	07 90       	elpm	r0, Z+
    180c:	f6 91       	elpm	r31, Z
    180e:	e0 2d       	mov	r30, r0
    1810:	19 94       	eijmp

00001812 <__muluhisi3>:
    1812:	3f d0       	rcall	.+126    	; 0x1892 <__umulhisi3>
    1814:	a5 9f       	mul	r26, r21
    1816:	90 0d       	add	r25, r0
    1818:	b4 9f       	mul	r27, r20
    181a:	90 0d       	add	r25, r0
    181c:	a4 9f       	mul	r26, r20
    181e:	80 0d       	add	r24, r0
    1820:	91 1d       	adc	r25, r1
    1822:	11 24       	eor	r1, r1
    1824:	08 95       	ret

00001826 <__udivmodhi4>:
    1826:	aa 1b       	sub	r26, r26
    1828:	bb 1b       	sub	r27, r27
    182a:	51 e1       	ldi	r21, 0x11	; 17
    182c:	07 c0       	rjmp	.+14     	; 0x183c <__udivmodhi4_ep>

0000182e <__udivmodhi4_loop>:
    182e:	aa 1f       	adc	r26, r26
    1830:	bb 1f       	adc	r27, r27
    1832:	a6 17       	cp	r26, r22
    1834:	b7 07       	cpc	r27, r23
    1836:	10 f0       	brcs	.+4      	; 0x183c <__udivmodhi4_ep>
    1838:	a6 1b       	sub	r26, r22
    183a:	b7 0b       	sbc	r27, r23

0000183c <__udivmodhi4_ep>:
    183c:	88 1f       	adc	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	5a 95       	dec	r21
    1842:	a9 f7       	brne	.-22     	; 0x182e <__udivmodhi4_loop>
    1844:	80 95       	com	r24
    1846:	90 95       	com	r25
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	08 95       	ret

0000184e <__udivmodsi4>:
    184e:	a1 e2       	ldi	r26, 0x21	; 33
    1850:	1a 2e       	mov	r1, r26
    1852:	aa 1b       	sub	r26, r26
    1854:	bb 1b       	sub	r27, r27
    1856:	fd 01       	movw	r30, r26
    1858:	0d c0       	rjmp	.+26     	; 0x1874 <__udivmodsi4_ep>

0000185a <__udivmodsi4_loop>:
    185a:	aa 1f       	adc	r26, r26
    185c:	bb 1f       	adc	r27, r27
    185e:	ee 1f       	adc	r30, r30
    1860:	ff 1f       	adc	r31, r31
    1862:	a2 17       	cp	r26, r18
    1864:	b3 07       	cpc	r27, r19
    1866:	e4 07       	cpc	r30, r20
    1868:	f5 07       	cpc	r31, r21
    186a:	20 f0       	brcs	.+8      	; 0x1874 <__udivmodsi4_ep>
    186c:	a2 1b       	sub	r26, r18
    186e:	b3 0b       	sbc	r27, r19
    1870:	e4 0b       	sbc	r30, r20
    1872:	f5 0b       	sbc	r31, r21

00001874 <__udivmodsi4_ep>:
    1874:	66 1f       	adc	r22, r22
    1876:	77 1f       	adc	r23, r23
    1878:	88 1f       	adc	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	1a 94       	dec	r1
    187e:	69 f7       	brne	.-38     	; 0x185a <__udivmodsi4_loop>
    1880:	60 95       	com	r22
    1882:	70 95       	com	r23
    1884:	80 95       	com	r24
    1886:	90 95       	com	r25
    1888:	9b 01       	movw	r18, r22
    188a:	ac 01       	movw	r20, r24
    188c:	bd 01       	movw	r22, r26
    188e:	cf 01       	movw	r24, r30
    1890:	08 95       	ret

00001892 <__umulhisi3>:
    1892:	a2 9f       	mul	r26, r18
    1894:	b0 01       	movw	r22, r0
    1896:	b3 9f       	mul	r27, r19
    1898:	c0 01       	movw	r24, r0
    189a:	a3 9f       	mul	r26, r19
    189c:	70 0d       	add	r23, r0
    189e:	81 1d       	adc	r24, r1
    18a0:	11 24       	eor	r1, r1
    18a2:	91 1d       	adc	r25, r1
    18a4:	b2 9f       	mul	r27, r18
    18a6:	70 0d       	add	r23, r0
    18a8:	81 1d       	adc	r24, r1
    18aa:	11 24       	eor	r1, r1
    18ac:	91 1d       	adc	r25, r1
    18ae:	08 95       	ret

000018b0 <eeprom_read_word>:
    18b0:	a8 e1       	ldi	r26, 0x18	; 24
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	42 e0       	ldi	r20, 0x02	; 2
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	05 c0       	rjmp	.+10     	; 0x18c4 <eeprom_read_blraw>

000018ba <eeprom_write_word>:
    18ba:	12 d0       	rcall	.+36     	; 0x18e0 <eeprom_write_byte>
    18bc:	27 2f       	mov	r18, r23
    18be:	11 c0       	rjmp	.+34     	; 0x18e2 <eeprom_write_r18>

000018c0 <eeprom_read_block>:
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22

000018c4 <eeprom_read_blraw>:
    18c4:	fc 01       	movw	r30, r24
    18c6:	f9 99       	sbic	0x1f, 1	; 31
    18c8:	fe cf       	rjmp	.-4      	; 0x18c6 <eeprom_read_blraw+0x2>
    18ca:	06 c0       	rjmp	.+12     	; 0x18d8 <eeprom_read_blraw+0x14>
    18cc:	f2 bd       	out	0x22, r31	; 34
    18ce:	e1 bd       	out	0x21, r30	; 33
    18d0:	f8 9a       	sbi	0x1f, 0	; 31
    18d2:	31 96       	adiw	r30, 0x01	; 1
    18d4:	00 b4       	in	r0, 0x20	; 32
    18d6:	0d 92       	st	X+, r0
    18d8:	41 50       	subi	r20, 0x01	; 1
    18da:	50 40       	sbci	r21, 0x00	; 0
    18dc:	b8 f7       	brcc	.-18     	; 0x18cc <eeprom_read_blraw+0x8>
    18de:	08 95       	ret

000018e0 <eeprom_write_byte>:
    18e0:	26 2f       	mov	r18, r22

000018e2 <eeprom_write_r18>:
    18e2:	f9 99       	sbic	0x1f, 1	; 31
    18e4:	fe cf       	rjmp	.-4      	; 0x18e2 <eeprom_write_r18>
    18e6:	1f ba       	out	0x1f, r1	; 31
    18e8:	92 bd       	out	0x22, r25	; 34
    18ea:	81 bd       	out	0x21, r24	; 33
    18ec:	20 bd       	out	0x20, r18	; 32
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	fa 9a       	sbi	0x1f, 2	; 31
    18f4:	f9 9a       	sbi	0x1f, 1	; 31
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	08 95       	ret

000018fc <_exit>:
    18fc:	f8 94       	cli

000018fe <__stop_program>:
    18fe:	ff cf       	rjmp	.-2      	; 0x18fe <__stop_program>
